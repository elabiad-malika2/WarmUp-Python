üß© Challenges en Python

1. Bases du langage Python
2. Fonctions et port√©e des variables
3. Listes, dictionnaires et tuples
4. Programmation orient√©e objet (classes)
5. Manipulation de fichiers
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "914e84e2",
   "metadata": {},
   "source": [
    "<center>\n",
    "<H1><span style=\"text-align: center; font-weight: bold; color: #746bb3ff;\">Les Dictionnaires & Tuples</span></H1>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4904b5d8",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold ; color: #19b7f1ff\">Les ressources: </span></H3> \n",
    "\n",
    "**Documentation Officielle** : \n",
    "* [Dictionnaires](https://docs.python.org/fr/3/tutorial/datastructures.html#dictionaries) \n",
    "* [Tuples](https://docs.python.org/fr/3/tutorial/datastructures.html#tuples-and-sequences)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ba65839",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 1 : Manipulation des dictionnaires Python</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Apprendre √† manipuler des dictionnaires en Python √† travers plusieurs op√©rations cl√©s\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "Consid√©rons le dictionnaire suivant :\n",
    "\n",
    "<code>\n",
    "First_dict = { \"Appareil\": \"Laptop\", \"Marque\": \"IBM\", \"Carte m√®re\": \"MSI Z490\", \"Carte Graphique\":\"GeForce RTX 3070\", \"RAM\": \"16G\", \"Processeur\": \"Intel core i7-G11\", \"SSD\": \"1 To\" }    </code>\n",
    "\n",
    "- *Parti 1:* √âcris un programme Python qui effectue les op√©rations suivantes :\n",
    "\n",
    "1. Corriger la valeur associ√©e √† la cl√© \"RAM\" pour qu‚Äôelle devienne \"32G\".\n",
    "\n",
    "2. Afficher successivement :\n",
    "\n",
    "3. La liste des cl√©s du dictionnaire\n",
    "\n",
    "4. La liste des valeurs\n",
    "\n",
    "5. La liste des paires cl√©-valeur\n",
    "\n",
    "6. Inverser les paires \"Processeur\" : \"Intel core i7-G11\" et \"Carte Graphique\" : \"GeForce RTX 3070\"\n",
    "\n",
    "7. Ajouter la paire cl√©-valeur suivante : \"Syst√®me d‚Äôexploitation\": \"Windows 10\"\n",
    "\n",
    "- *Parti 2:* On consid√®re le dictionnaire suivant dont les cl√©s sont les noms des √©l√®ves et les valeurs des cl√©s sont les moyennes g√©n√©rales obtenues en passant l‚Äôexamen final.\n",
    "\n",
    "<code>notes_eleves = { \"Amine\": 15.5, \"Yassine\": 19.0, \"Reda\": 14.2, \"Malak\": 8.7, \"Manal\": 20.0, \"Ahmed\": 7.5,\"Saad\": 11.3, \"Hannae\": 9.8 }</code>\n",
    "\n",
    "√âcrire un programme Python qui partitionne ce dictionnaire en deux sous dictionnaires :\n",
    "\n",
    "* etudiantAdmis dont les cl√©s sont les √©tudiants admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne sup√©rieures ou √©gales √† 10 ).\n",
    "\n",
    "* etudiantNonAdmis dont les cl√©s sont les √©tudiants non admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne inf√©rieur ou √©gale √† 10). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0fc954a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Appareil:Laptop\n",
      "Marque:IBM\n",
      "Carte m√®re:MSI Z490\n",
      "Carte Graphique:GeForce RTX 3070\n",
      "RAM:32G\n",
      "Processeur:Intel core i7-G11\n",
      "SSD:1 To\n",
      "{'Appareil': 'Laptop', 'Marque': 'IBM', 'Carte m√®re': 'MSI Z490', 'Carte Graphique': 'GeForce RTX 3070', 'RAM': '32G', 'Processeur': 'Intel core i7-G11', 'SSD': '1 To', 'Syst√®me d‚Äôexploitation': 'Windows 10'}\n"
     ]
    }
   ],
   "source": [
    "First_dict = { \"Appareil\": \"Laptop\", \"Marque\": \"IBM\", \"Carte m√®re\": \"MSI Z490\",\n",
    "               \"Carte Graphique\":\"GeForce RTX 3070\", \"RAM\": \"16G\",\n",
    "               \"Processeur\": \"Intel core i7-G11\", \"SSD\": \"1 To\" } \n",
    "    # ex1\n",
    "First_dict[\"RAM\"]=\"32G\"\n",
    "\n",
    "    # ex2 et 3\n",
    "# for k in First_dict:\n",
    "#     print(k)\n",
    "#     print(First_dict[k])\n",
    "\n",
    "    # ex 4\n",
    "for key , value in First_dict.items():\n",
    "    print(f\"{key}:{value}\")\n",
    "\n",
    "    #  ex 5\n",
    "     \n",
    "    #  ex 6\n",
    "First_dict[\"Syst√®me d‚Äôexploitation\"]=\"Windows 10\"\n",
    "        \n",
    "\n",
    "print(First_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c50b65e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Amine': 15.5, 'Yassine': 19.0, 'Reda': 14.2, 'Manal': 20.0, 'Saad': 11.3} {'Malak': 8.7, 'Ahmed': 7.5, 'Hannae': 9.8}\n"
     ]
    }
   ],
   "source": [
    "notes_eleves = { \"Amine\": 15.5, \"Yassine\": 19.0, \"Reda\": 14.2, \"Malak\": 8.7, \"Manal\": 20.0, \"Ahmed\": 7.5,\"Saad\": 11.3, \"Hannae\": 9.8 }\n",
    "etudiantsAdmis={}\n",
    "etudiantsNonAdmis={}\n",
    "for k in notes_eleves:\n",
    "    if notes_eleves[k] >= 10 :\n",
    "        etudiantsAdmis[k]=notes_eleves[k]\n",
    "    else:\n",
    "        etudiantsNonAdmis[k]=notes_eleves[k]\n",
    "print(etudiantsAdmis,etudiantsNonAdmis)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ab8effa",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 2 : Mise √† Jour de Dictionnaires</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Fusionner plusieurs dictionnaires en un seul.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez update() pour fusionner trois dictionnaires diff√©rents.\n",
    "* Affichez le dictionnaire final avec toutes les cl√©s et valeurs combin√©es.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "85cd8892",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dictionnaire fusionn√© : {'nom': 'Malika', 'age': 21, 'pays': 'Maroc', 'formation': 'D√©veloppement digital'}\n"
     ]
    }
   ],
   "source": [
    "dict1 = {\"nom\": \"Malika\", \"age\": 22}\n",
    "dict2 = {\"pays\": \"Maroc\"}\n",
    "dict3 = {\"formation\": \"D√©veloppement digital\"}\n",
    "\n",
    "resultat = dict1.copy()   \n",
    "resultat.update(dict2)    \n",
    "resultat.update(dict3)   \n",
    "\n",
    "print(\"Dictionnaire fusionn√© :\", resultat)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5dd1c26",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 3 : Conversion de Deux Listes en Dictionnaire</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Cr√©er un dictionnaire √† partir de deux listes (une pour les cl√©s, une pour les valeurs).\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez zip() pour combiner les deux listes.\n",
    "* Convertissez le r√©sultat en dictionnaire.\n",
    "* Affichez le dictionnaire cr√©√©.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2663dae7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'nom': 'Malika', 'prenom': 'EL ABIAD', 'age': 22, 'formation': 'YOUCODE'}\n"
     ]
    }
   ],
   "source": [
    "key=[\"nom\",\"prenom\",\"age\",\"formation\"]\n",
    "value=[\"Malika\",\"EL ABIAD\",22,\"YOUCODE\"]\n",
    "dictionnaire=dict(zip(key,value))\n",
    "print(dictionnaire)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b64cf938",
   "metadata": {},
   "source": [
    "\n",
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 4 : Tri d'un Dictionnaire</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Trier un dictionnaire selon ses valeurs.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez items() pour obtenir les paires cl√©-valeur.\n",
    "* Triez ces paires par valeur.\n",
    "* Cr√©ez un nouveau dictionnaire √† partir des paires tri√©es.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09480797",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Amine', 15.5), ('Yassine', 19.0), ('Reda', 14.2), ('Malak', 8.7), ('Manal', 20.0), ('Ahmed', 7.5), ('Saad', 11.3), ('Hannae', 9.8)]\n",
      "Manal : 20.0\n",
      "Yassine : 19.0\n",
      "Amine : 15.5\n",
      "Reda : 14.2\n",
      "Saad : 11.3\n",
      "Hannae : 9.8\n",
      "Malak : 8.7\n",
      "Ahmed : 7.5\n",
      "{'Manal': 20.0, 'Yassine': 19.0, 'Amine': 15.5, 'Reda': 14.2, 'Saad': 11.3, 'Hannae': 9.8, 'Malak': 8.7, 'Ahmed': 7.5}\n"
     ]
    }
   ],
   "source": [
    "notes = { \"Amine\": 15.5, \"Yassine\": 19.0, \"Reda\": 14.2, \"Malak\": 8.7, \"Manal\": 20.0, \"Ahmed\": 7.5,\"Saad\": 11.3, \"Hannae\": 9.8 }\n",
    "items=list(notes.items())\n",
    "print(items)\n",
    "\n",
    "for i in range(len(items)):\n",
    "    for j in range(i+1, len(items)):\n",
    "        if items[j][1] > items[i][1]:\n",
    "            temp = items[i]\n",
    "            items[i] = items[j]\n",
    "            items[j] = temp\n",
    "for nom , notes in items:\n",
    "    print(f\"{nom} : {notes}\")\n",
    "trie=dict(items)\n",
    "print(trie)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c429ffc",
   "metadata": {},
   "source": [
    "\n",
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 5 : Manipulation de tuples </span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Comprendre la structure des tuples, leur immutabilit√©, et leur utilisation pour stocker des donn√©es group√©es et ordonn√©es.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Cr√©e un tuple nomm√© etudiant_info contenant les informations suivantes dans cet ordre : Pr√©nom : \"Yasmine\", √Çge : 22, Fili√®re : \"Informatique\", Moyenne g√©n√©rale : 17.4\n",
    "* Affiche les informations stock√©es dans le tuple, une par ligne, avec un texte explicite. (ex: ‚ÄúPr√©nom : Yasmine‚Äù)\n",
    "* Tente de modifier la fili√®re dans le tuple. Que se passe-t-il ? Explique pourquoi.\n",
    "* Utilise l'op√©rateur de slicing pour afficher uniquement le pr√©nom et l'√¢ge.\n",
    "* Cr√©e un nouveau tuple en combinant etudiant_info avec un second tuple contenant la mention \"Tr√®s Bien\" et l‚Äôann√©e d‚Äôobtention du dipl√¥me (2024), puis affiche le tuple final."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e59354d",
   "metadata": {},
   "outputs": [],
   "source": [
    "etudiant_info = (\"Yasmine\",22,\"Informatique\",17.4)\n",
    "etudiant_key=(\"Pr√©nom\",\"Age\",\"Fili√®re\",\"Moyenne g√©n√©rale\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdb88a19",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
üß© Challenges en Python

1. Bases du langage Python
2. Fonctions et port√©e des variables
3. Listes, dictionnaires et tuples
4. Programmation orient√©e objet (classes)
5. Manipulation de fichiers
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "914e84e2",
   "metadata": {},
   "source": [
    "<center>\n",
    "<H1><span style=\"text-align: center; font-weight: bold; color: #746bb3ff;\">Les Dictionnaires & Tuples</span></H1>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4904b5d8",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold ; color: #19b7f1ff\">Les ressources: </span></H3> \n",
    "\n",
    "**Documentation Officielle** : \n",
    "* [Dictionnaires](https://docs.python.org/fr/3/tutorial/datastructures.html#dictionaries) \n",
    "* [Tuples](https://docs.python.org/fr/3/tutorial/datastructures.html#tuples-and-sequences)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ba65839",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 1 : Manipulation des dictionnaires Python</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Apprendre √† manipuler des dictionnaires en Python √† travers plusieurs op√©rations cl√©s\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "Consid√©rons le dictionnaire suivant :\n",
    "\n",
    "<code>\n",
    "First_dict = { \"Appareil\": \"Laptop\", \"Marque\": \"IBM\", \"Carte m√®re\": \"MSI Z490\", \"Carte Graphique\":\"GeForce RTX 3070\", \"RAM\": \"16G\", \"Processeur\": \"Intel core i7-G11\", \"SSD\": \"1 To\" }    </code>\n",
    "\n",
    "- *Parti 1:* √âcris un programme Python qui effectue les op√©rations suivantes :\n",
    "\n",
    "1. Corriger la valeur associ√©e √† la cl√© \"RAM\" pour qu‚Äôelle devienne \"32G\".\n",
    "\n",
    "2. Afficher successivement :\n",
    "\n",
    "3. La liste des cl√©s du dictionnaire\n",
    "\n",
    "4. La liste des valeurs\n",
    "\n",
    "5. La liste des paires cl√©-valeur\n",
    "\n",
    "6. Inverser les paires \"Processeur\" : \"Intel core i7-G11\" et \"Carte Graphique\" : \"GeForce RTX 3070\"\n",
    "\n",
    "7. Ajouter la paire cl√©-valeur suivante : \"Syst√®me d‚Äôexploitation\": \"Windows 10\"\n",
    "\n",
    "- *Parti 2:* On consid√®re le dictionnaire suivant dont les cl√©s sont les noms des √©l√®ves et les valeurs des cl√©s sont les moyennes g√©n√©rales obtenues en passant l‚Äôexamen final.\n",
    "\n",
    "<code>notes_eleves = { \"Amine\": 15.5, \"Yassine\": 19.0, \"Reda\": 14.2, \"Malak\": 8.7, \"Manal\": 20.0, \"Ahmed\": 7.5,\"Saad\": 11.3, \"Hannae\": 9.8 }</code>\n",
    "\n",
    "√âcrire un programme Python qui partitionne ce dictionnaire en deux sous dictionnaires :\n",
    "\n",
    "* etudiantAdmis dont les cl√©s sont les √©tudiants admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne sup√©rieures ou √©gales √† 10 ).\n",
    "\n",
    "* etudiantNonAdmis dont les cl√©s sont les √©tudiants non admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne inf√©rieur ou √©gale √† 10). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0fc954a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Appareil:Laptop\n",
      "Marque:IBM\n",
      "Carte m√®re:MSI Z490\n",
      "Carte Graphique:GeForce RTX 3070\n",
      "RAM:32G\n",
      "Processeur:Intel core i7-G11\n",
      "SSD:1 To\n",
      "{'Appareil': 'Laptop', 'Marque': 'IBM', 'Carte m√®re': 'MSI Z490', 'Carte Graphique': 'GeForce RTX 3070', 'RAM': '32G', 'Processeur': 'Intel core i7-G11', 'SSD': '1 To', 'Syst√®me d‚Äôexploitation': 'Windows 10'}\n"
     ]
    }
   ],
   "source": [
    "First_dict = { \"Appareil\": \"Laptop\", \"Marque\": \"IBM\", \"Carte m√®re\": \"MSI Z490\",\n",
    "               \"Carte Graphique\":\"GeForce RTX 3070\", \"RAM\": \"16G\",\n",
    "               \"Processeur\": \"Intel core i7-G11\", \"SSD\": \"1 To\" } \n",
    "    # ex1\n",
    "First_dict[\"RAM\"]=\"32G\"\n",
    "\n",
    "    # ex2 et 3\n",
    "# for k in First_dict:\n",
    "#     print(k)\n",
    "#     print(First_dict[k])\n",
    "\n",
    "    # ex 4\n",
    "for key , value in First_dict.items():\n",
    "    print(f\"{key}:{value}\")\n",
    "\n",
    "    #  ex 5\n",
    "     \n",
    "    #  ex 6\n",
    "First_dict[\"Syst√®me d‚Äôexploitation\"]=\"Windows 10\"\n",
    "        \n",
    "\n",
    "print(First_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c50b65e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Amine': 15.5, 'Yassine': 19.0, 'Reda': 14.2, 'Manal': 20.0, 'Saad': 11.3} {'Malak': 8.7, 'Ahmed': 7.5, 'Hannae': 9.8}\n"
     ]
    }
   ],
   "source": [
    "notes_eleves = { \"Amine\": 15.5, \"Yassine\": 19.0, \"Reda\": 14.2, \"Malak\": 8.7, \"Manal\": 20.0, \"Ahmed\": 7.5,\"Saad\": 11.3, \"Hannae\": 9.8 }\n",
    "etudiantsAdmis={}\n",
    "etudiantsNonAdmis={}\n",
    "for k in notes_eleves:\n",
    "    if notes_eleves[k] >= 10 :\n",
    "        etudiantsAdmis[k]=notes_eleves[k]\n",
    "    else:\n",
    "        etudiantsNonAdmis[k]=notes_eleves[k]\n",
    "print(etudiantsAdmis,etudiantsNonAdmis)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ab8effa",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 2 : Mise √† Jour de Dictionnaires</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Fusionner plusieurs dictionnaires en un seul.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez update() pour fusionner trois dictionnaires diff√©rents.\n",
    "* Affichez le dictionnaire final avec toutes les cl√©s et valeurs combin√©es.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "85cd8892",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dictionnaire fusionn√© : {'nom': 'Malika', 'age': 21, 'pays': 'Maroc', 'formation': 'D√©veloppement digital'}\n"
     ]
    }
   ],
   "source": [
    "dict1 = {\"nom\": \"Malika\", \"age\": 22}\n",
    "dict2 = {\"pays\": \"Maroc\"}\n",
    "dict3 = {\"formation\": \"D√©veloppement digital\"}\n",
    "\n",
    "resultat = dict1.copy()   \n",
    "resultat.update(dict2)    \n",
    "resultat.update(dict3)   \n",
    "\n",
    "print(\"Dictionnaire fusionn√© :\", resultat)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5dd1c26",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 3 : Conversion de Deux Listes en Dictionnaire</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Cr√©er un dictionnaire √† partir de deux listes (une pour les cl√©s, une pour les valeurs).\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez zip() pour combiner les deux listes.\n",
    "* Convertissez le r√©sultat en dictionnaire.\n",
    "* Affichez le dictionnaire cr√©√©.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2663dae7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'nom': 'Malika', 'prenom': 'EL ABIAD', 'age': 22, 'formation': 'YOUCODE'}\n"
     ]
    }
   ],
   "source": [
    "key=[\"nom\",\"prenom\",\"age\",\"formation\"]\n",
    "value=[\"Malika\",\"EL ABIAD\",22,\"YOUCODE\"]\n",
    "dictionnaire=dict(zip(key,value))\n",
    "print(dictionnaire)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b64cf938",
   "metadata": {},
   "source": [
    "\n",
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 4 : Tri d'un Dictionnaire</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Trier un dictionnaire selon ses valeurs.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez items() pour obtenir les paires cl√©-valeur.\n",
    "* Triez ces paires par valeur.\n",
    "* Cr√©ez un nouveau dictionnaire √† partir des paires tri√©es.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09480797",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Amine', 15.5), ('Yassine', 19.0), ('Reda', 14.2), ('Malak', 8.7), ('Manal', 20.0), ('Ahmed', 7.5), ('Saad', 11.3), ('Hannae', 9.8)]\n",
      "Manal : 20.0\n",
      "Yassine : 19.0\n",
      "Amine : 15.5\n",
      "Reda : 14.2\n",
      "Saad : 11.3\n",
      "Hannae : 9.8\n",
      "Malak : 8.7\n",
      "Ahmed : 7.5\n",
      "{'Manal': 20.0, 'Yassine': 19.0, 'Amine': 15.5, 'Reda': 14.2, 'Saad': 11.3, 'Hannae': 9.8, 'Malak': 8.7, 'Ahmed': 7.5}\n"
     ]
    }
   ],
   "source": [
    "notes = { \"Amine\": 15.5, \"Yassine\": 19.0, \"Reda\": 14.2, \"Malak\": 8.7, \"Manal\": 20.0, \"Ahmed\": 7.5,\"Saad\": 11.3, \"Hannae\": 9.8 }\n",
    "items=list(notes.items())\n",
    "print(items)\n",
    "\n",
    "for i in range(len(items)):\n",
    "    for j in range(i+1, len(items)):\n",
    "        if items[j][1] > items[i][1]:\n",
    "            temp = items[i]\n",
    "            items[i] = items[j]\n",
    "            items[j] = temp\n",
    "for nom , notes in items:\n",
    "    print(f\"{nom} : {notes}\")\n",
    "trie=dict(items)\n",
    "print(trie)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c429ffc",
   "metadata": {},
   "source": [
    "\n",
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 5 : Manipulation de tuples </span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Comprendre la structure des tuples, leur immutabilit√©, et leur utilisation pour stocker des donn√©es group√©es et ordonn√©es.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Cr√©e un tuple nomm√© etudiant_info contenant les informations suivantes dans cet ordre : Pr√©nom : \"Yasmine\", √Çge : 22, Fili√®re : \"Informatique\", Moyenne g√©n√©rale : 17.4\n",
    "* Affiche les informations stock√©es dans le tuple, une par ligne, avec un texte explicite. (ex: ‚ÄúPr√©nom : Yasmine‚Äù)\n",
    "* Tente de modifier la fili√®re dans le tuple. Que se passe-t-il ? Explique pourquoi.\n",
    "* Utilise l'op√©rateur de slicing pour afficher uniquement le pr√©nom et l'√¢ge.\n",
    "* Cr√©e un nouveau tuple en combinant etudiant_info avec un second tuple contenant la mention \"Tr√®s Bien\" et l‚Äôann√©e d‚Äôobtention du dipl√¥me (2024), puis affiche le tuple final."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e59354d",
   "metadata": {},
   "outputs": [],
   "source": [
    "etudiant_info = (\"Yasmine\",22,\"Informatique\",17.4)\n",
    "etudiant_key=(\"Pr√©nom\",\"Age\",\"Fili√®re\",\"Moyenne g√©n√©rale\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdb88a19",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "784cad32",
   "metadata": {},
   "source": [
    "\n",
    "<center>\n",
    "<H1><span style=\"text-align: center; font-weight: bold; color: #746bb3ff;\">Gestion de Fichiers</span></H1>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00451f59",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold ; color: #19b7f1ff\">Les ressources: </span></H3> \n",
    "\n",
    "* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/inputoutput.html#reading-and-writing-files)\n",
    "* [Reading and Writing Files in Python](https://realpython.com/read-write-files-python/)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d2ea4b9",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 1 : Extraction et Traitement de Fichiers</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Lire plusieurs fichiers texte et combiner leur contenu.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez os.listdir() pour lister tous les fichiers texte dans un r√©pertoire.\n",
    "* Utilisez open() pour lire chaque fichier et extraire son contenu.\n",
    "* Combinez le contenu de tous les fichiers en un seul texte."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "21b6f2cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['.git', 'Dictionnaires_Tuples.ipynb', 'Fichiers.ipynb', 'Fonctions.ipynb', 'Les_Bases.ipynb', 'Listes.ipynb', 'README.md']\n",
      "--- Ignor√© (ce n'est pas un fichier) : .git ---\n",
      "--- Lecture de Dictionnaires_Tuples.ipynb ---\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"914e84e2\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<center>\\n\",\n",
      "    \"<H1><span style=\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\">Les Dictionnaires & Tuples</span></H1>\\n\",\n",
      "    \"</center>\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"4904b5d8\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold ; color: #19b7f1ff\\\">Les ressources: </span></H3> \\n\",\n",
      "    \"\\n\",\n",
      "    \"**Documentation Officielle** : \\n\",\n",
      "    \"* [Dictionnaires](https://docs.python.org/fr/3/tutorial/datastructures.html#dictionaries) \\n\",\n",
      "    \"* [Tuples](https://docs.python.org/fr/3/tutorial/datastructures.html#tuples-and-sequences)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"6ba65839\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 1 : Manipulation des dictionnaires Python</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Apprendre √† manipuler des dictionnaires en Python √† travers plusieurs op√©rations cl√©s\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"Consid√©rons le dictionnaire suivant :\\n\",\n",
      "    \"\\n\",\n",
      "    \"<code>\\n\",\n",
      "    \"First_dict = { \\\"Appareil\\\": \\\"Laptop\\\", \\\"Marque\\\": \\\"IBM\\\", \\\"Carte m√®re\\\": \\\"MSI Z490\\\", \\\"Carte Graphique\\\":\\\"GeForce RTX 3070\\\", \\\"RAM\\\": \\\"16G\\\", \\\"Processeur\\\": \\\"Intel core i7-G11\\\", \\\"SSD\\\": \\\"1 To\\\" }    </code>\\n\",\n",
      "    \"\\n\",\n",
      "    \"- *Parti 1:* √âcris un programme Python qui effectue les op√©rations suivantes :\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. Corriger la valeur associ√©e √† la cl√© \\\"RAM\\\" pour qu‚Äôelle devienne \\\"32G\\\".\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. Afficher successivement :\\n\",\n",
      "    \"\\n\",\n",
      "    \"3. La liste des cl√©s du dictionnaire\\n\",\n",
      "    \"\\n\",\n",
      "    \"4. La liste des valeurs\\n\",\n",
      "    \"\\n\",\n",
      "    \"5. La liste des paires cl√©-valeur\\n\",\n",
      "    \"\\n\",\n",
      "    \"6. Inverser les paires \\\"Processeur\\\" : \\\"Intel core i7-G11\\\" et \\\"Carte Graphique\\\" : \\\"GeForce RTX 3070\\\"\\n\",\n",
      "    \"\\n\",\n",
      "    \"7. Ajouter la paire cl√©-valeur suivante : \\\"Syst√®me d‚Äôexploitation\\\": \\\"Windows 10\\\"\\n\",\n",
      "    \"\\n\",\n",
      "    \"- *Parti 2:* On consid√®re le dictionnaire suivant dont les cl√©s sont les noms des √©l√®ves et les valeurs des cl√©s sont les moyennes g√©n√©rales obtenues en passant l‚Äôexamen final.\\n\",\n",
      "    \"\\n\",\n",
      "    \"<code>notes_eleves = { \\\"Amine\\\": 15.5, \\\"Yassine\\\": 19.0, \\\"Reda\\\": 14.2, \\\"Malak\\\": 8.7, \\\"Manal\\\": 20.0, \\\"Ahmed\\\": 7.5,\\\"Saad\\\": 11.3, \\\"Hannae\\\": 9.8 }</code>\\n\",\n",
      "    \"\\n\",\n",
      "    \"√âcrire un programme Python qui partitionne ce dictionnaire en deux sous dictionnaires :\\n\",\n",
      "    \"\\n\",\n",
      "    \"* etudiantAdmis dont les cl√©s sont les √©tudiants admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne sup√©rieures ou √©gales √† 10 ).\\n\",\n",
      "    \"\\n\",\n",
      "    \"* etudiantNonAdmis dont les cl√©s sont les √©tudiants non admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne inf√©rieur ou √©gale √† 10). \"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 10,\n",
      "   \"id\": \"0fc954a1\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"Appareil:Laptop\\n\",\n",
      "      \"Marque:IBM\\n\",\n",
      "      \"Carte m√®re:MSI Z490\\n\",\n",
      "      \"Carte Graphique:GeForce RTX 3070\\n\",\n",
      "      \"RAM:32G\\n\",\n",
      "      \"Processeur:Intel core i7-G11\\n\",\n",
      "      \"SSD:1 To\\n\",\n",
      "      \"{'Appareil': 'Laptop', 'Marque': 'IBM', 'Carte m√®re': 'MSI Z490', 'Carte Graphique': 'GeForce RTX 3070', 'RAM': '32G', 'Processeur': 'Intel core i7-G11', 'SSD': '1 To', 'Syst√®me d‚Äôexploitation': 'Windows 10'}\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"First_dict = { \\\"Appareil\\\": \\\"Laptop\\\", \\\"Marque\\\": \\\"IBM\\\", \\\"Carte m√®re\\\": \\\"MSI Z490\\\",\\n\",\n",
      "    \"               \\\"Carte Graphique\\\":\\\"GeForce RTX 3070\\\", \\\"RAM\\\": \\\"16G\\\",\\n\",\n",
      "    \"               \\\"Processeur\\\": \\\"Intel core i7-G11\\\", \\\"SSD\\\": \\\"1 To\\\" } \\n\",\n",
      "    \"    # ex1\\n\",\n",
      "    \"First_dict[\\\"RAM\\\"]=\\\"32G\\\"\\n\",\n",
      "    \"\\n\",\n",
      "    \"    # ex2 et 3\\n\",\n",
      "    \"# for k in First_dict:\\n\",\n",
      "    \"#     print(k)\\n\",\n",
      "    \"#     print(First_dict[k])\\n\",\n",
      "    \"\\n\",\n",
      "    \"    # ex 4\\n\",\n",
      "    \"for key , value in First_dict.items():\\n\",\n",
      "    \"    print(f\\\"{key}:{value}\\\")\\n\",\n",
      "    \"\\n\",\n",
      "    \"    #  ex 5\\n\",\n",
      "    \"     \\n\",\n",
      "    \"    #  ex 6\\n\",\n",
      "    \"First_dict[\\\"Syst√®me d‚Äôexploitation\\\"]=\\\"Windows 10\\\"\\n\",\n",
      "    \"        \\n\",\n",
      "    \"\\n\",\n",
      "    \"print(First_dict)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 16,\n",
      "   \"id\": \"c50b65e4\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"{'Amine': 15.5, 'Yassine': 19.0, 'Reda': 14.2, 'Manal': 20.0, 'Saad': 11.3} {'Malak': 8.7, 'Ahmed': 7.5, 'Hannae': 9.8}\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"notes_eleves = { \\\"Amine\\\": 15.5, \\\"Yassine\\\": 19.0, \\\"Reda\\\": 14.2, \\\"Malak\\\": 8.7, \\\"Manal\\\": 20.0, \\\"Ahmed\\\": 7.5,\\\"Saad\\\": 11.3, \\\"Hannae\\\": 9.8 }\\n\",\n",
      "    \"etudiantsAdmis={}\\n\",\n",
      "    \"etudiantsNonAdmis={}\\n\",\n",
      "    \"for k in notes_eleves:\\n\",\n",
      "    \"    if notes_eleves[k] >= 10 :\\n\",\n",
      "    \"        etudiantsAdmis[k]=notes_eleves[k]\\n\",\n",
      "    \"    else:\\n\",\n",
      "    \"        etudiantsNonAdmis[k]=notes_eleves[k]\\n\",\n",
      "    \"print(etudiantsAdmis,etudiantsNonAdmis)\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"7ab8effa\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 2 : Mise √† Jour de Dictionnaires</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Fusionner plusieurs dictionnaires en un seul.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez update() pour fusionner trois dictionnaires diff√©rents.\\n\",\n",
      "    \"* Affichez le dictionnaire final avec toutes les cl√©s et valeurs combin√©es.\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 22,\n",
      "   \"id\": \"85cd8892\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"Dictionnaire fusionn√© : {'nom': 'Malika', 'age': 21, 'pays': 'Maroc', 'formation': 'D√©veloppement digital'}\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"dict1 = {\\\"nom\\\": \\\"Malika\\\", \\\"age\\\": 22}\\n\",\n",
      "    \"dict2 = {\\\"pays\\\": \\\"Maroc\\\"}\\n\",\n",
      "    \"dict3 = {\\\"formation\\\": \\\"D√©veloppement digital\\\"}\\n\",\n",
      "    \"\\n\",\n",
      "    \"resultat = dict1.copy()   \\n\",\n",
      "    \"resultat.update(dict2)    \\n\",\n",
      "    \"resultat.update(dict3)   \\n\",\n",
      "    \"\\n\",\n",
      "    \"print(\\\"Dictionnaire fusionn√© :\\\", resultat)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"c5dd1c26\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 3 : Conversion de Deux Listes en Dictionnaire</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Cr√©er un dictionnaire √† partir de deux listes (une pour les cl√©s, une pour les valeurs).\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez zip() pour combiner les deux listes.\\n\",\n",
      "    \"* Convertissez le r√©sultat en dictionnaire.\\n\",\n",
      "    \"* Affichez le dictionnaire cr√©√©.\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 24,\n",
      "   \"id\": \"2663dae7\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"{'nom': 'Malika', 'prenom': 'EL ABIAD', 'age': 22, 'formation': 'YOUCODE'}\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"key=[\\\"nom\\\",\\\"prenom\\\",\\\"age\\\",\\\"formation\\\"]\\n\",\n",
      "    \"value=[\\\"Malika\\\",\\\"EL ABIAD\\\",22,\\\"YOUCODE\\\"]\\n\",\n",
      "    \"dictionnaire=dict(zip(key,value))\\n\",\n",
      "    \"print(dictionnaire)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"b64cf938\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"\\n\",\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 4 : Tri d'un Dictionnaire</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Trier un dictionnaire selon ses valeurs.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez items() pour obtenir les paires cl√©-valeur.\\n\",\n",
      "    \"* Triez ces paires par valeur.\\n\",\n",
      "    \"* Cr√©ez un nouveau dictionnaire √† partir des paires tri√©es.\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"09480797\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"[('Amine', 15.5), ('Yassine', 19.0), ('Reda', 14.2), ('Malak', 8.7), ('Manal', 20.0), ('Ahmed', 7.5), ('Saad', 11.3), ('Hannae', 9.8)]\\n\",\n",
      "      \"Manal : 20.0\\n\",\n",
      "      \"Yassine : 19.0\\n\",\n",
      "      \"Amine : 15.5\\n\",\n",
      "      \"Reda : 14.2\\n\",\n",
      "      \"Saad : 11.3\\n\",\n",
      "      \"Hannae : 9.8\\n\",\n",
      "      \"Malak : 8.7\\n\",\n",
      "      \"Ahmed : 7.5\\n\",\n",
      "      \"{'Manal': 20.0, 'Yassine': 19.0, 'Amine': 15.5, 'Reda': 14.2, 'Saad': 11.3, 'Hannae': 9.8, 'Malak': 8.7, 'Ahmed': 7.5}\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"notes = { \\\"Amine\\\": 15.5, \\\"Yassine\\\": 19.0, \\\"Reda\\\": 14.2, \\\"Malak\\\": 8.7, \\\"Manal\\\": 20.0, \\\"Ahmed\\\": 7.5,\\\"Saad\\\": 11.3, \\\"Hannae\\\": 9.8 }\\n\",\n",
      "    \"items=list(notes.items())\\n\",\n",
      "    \"print(items)\\n\",\n",
      "    \"\\n\",\n",
      "    \"for i in range(len(items)):\\n\",\n",
      "    \"    for j in range(i+1, len(items)):\\n\",\n",
      "    \"        if items[j][1] > items[i][1]:\\n\",\n",
      "    \"            temp = items[i]\\n\",\n",
      "    \"            items[i] = items[j]\\n\",\n",
      "    \"            items[j] = temp\\n\",\n",
      "    \"for nom , notes in items:\\n\",\n",
      "    \"    print(f\\\"{nom} : {notes}\\\")\\n\",\n",
      "    \"trie=dict(items)\\n\",\n",
      "    \"print(trie)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"2c429ffc\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"\\n\",\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 5 : Manipulation de tuples </span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Comprendre la structure des tuples, leur immutabilit√©, et leur utilisation pour stocker des donn√©es group√©es et ordonn√©es.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Cr√©e un tuple nomm√© etudiant_info contenant les informations suivantes dans cet ordre : Pr√©nom : \\\"Yasmine\\\", √Çge : 22, Fili√®re : \\\"Informatique\\\", Moyenne g√©n√©rale : 17.4\\n\",\n",
      "    \"* Affiche les informations stock√©es dans le tuple, une par ligne, avec un texte explicite. (ex: ‚ÄúPr√©nom : Yasmine‚Äù)\\n\",\n",
      "    \"* Tente de modifier la fili√®re dans le tuple. Que se passe-t-il ? Explique pourquoi.\\n\",\n",
      "    \"* Utilise l'op√©rateur de slicing pour afficher uniquement le pr√©nom et l'√¢ge.\\n\",\n",
      "    \"* Cr√©e un nouveau tuple en combinant etudiant_info avec un second tuple contenant la mention \\\"Tr√®s Bien\\\" et l‚Äôann√©e d‚Äôobtention du dipl√¥me (2024), puis affiche le tuple final.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"1e59354d\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"etudiant_info = (\\\"Yasmine\\\",22,\\\"Informatique\\\",17.4)\\n\",\n",
      "    \"etudiant_key=(\\\"Pr√©nom\\\",\\\"Age\\\",\\\"Fili√®re\\\",\\\"Moyenne g√©n√©rale\\\")\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"bdb88a19\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": []\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.13.7\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 5\n",
      "}\n",
      "\n",
      "--- Lecture de Fichiers.ipynb ---\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"784cad32\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"\\n\",\n",
      "    \"<center>\\n\",\n",
      "    \"<H1><span style=\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\">Gestion de Fichiers</span></H1>\\n\",\n",
      "    \"</center>\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"00451f59\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold ; color: #19b7f1ff\\\">Les ressources: </span></H3> \\n\",\n",
      "    \"\\n\",\n",
      "    \"* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/inputoutput.html#reading-and-writing-files)\\n\",\n",
      "    \"* [Reading and Writing Files in Python](https://realpython.com/read-write-files-python/)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"3d2ea4b9\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 1 : Extraction et Traitement de Fichiers</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Lire plusieurs fichiers texte et combiner leur contenu.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez os.listdir() pour lister tous les fichiers texte dans un r√©pertoire.\\n\",\n",
      "    \"* Utilisez open() pour lire chaque fichier et extraire son contenu.\\n\",\n",
      "    \"* Combinez le contenu de tous les fichiers en un seul texte.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"21b6f2cb\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"['.git', 'Dictionnaires_Tuples.ipynb', 'Fichiers.ipynb', 'Fonctions.ipynb', 'Les_Bases.ipynb', 'Listes.ipynb', 'README.md']\\n\",\n",
      "      \"--- Ignor√© (ce n'est pas un fichier) : .git ---\\n\",\n",
      "      \"--- Lecture de Dictionnaires_Tuples.ipynb ---\\n\",\n",
      "      \"{\\n\",\n",
      "      \" \\\"cells\\\": [\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"914e84e2\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H1><span style=\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\">Les Dictionnaires & Tuples</span></H1>\\\\n\\\",\\n\",\n",
      "      \"    \\\"</center>\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"4904b5d8\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\">Les ressources: </span></H3> \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"**Documentation Officielle** : \\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Dictionnaires](https://docs.python.org/fr/3/tutorial/datastructures.html#dictionaries) \\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Tuples](https://docs.python.org/fr/3/tutorial/datastructures.html#tuples-and-sequences)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"6ba65839\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 1 : Manipulation des dictionnaires Python</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Apprendre √† manipuler des dictionnaires en Python √† travers plusieurs op√©rations cl√©s\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Consid√©rons le dictionnaire suivant :\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<code>\\\\n\\\",\\n\",\n",
      "      \"    \\\"First_dict = { \\\\\\\"Appareil\\\\\\\": \\\\\\\"Laptop\\\\\\\", \\\\\\\"Marque\\\\\\\": \\\\\\\"IBM\\\\\\\", \\\\\\\"Carte m√®re\\\\\\\": \\\\\\\"MSI Z490\\\\\\\", \\\\\\\"Carte Graphique\\\\\\\":\\\\\\\"GeForce RTX 3070\\\\\\\", \\\\\\\"RAM\\\\\\\": \\\\\\\"16G\\\\\\\", \\\\\\\"Processeur\\\\\\\": \\\\\\\"Intel core i7-G11\\\\\\\", \\\\\\\"SSD\\\\\\\": \\\\\\\"1 To\\\\\\\" }    </code>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"- *Parti 1:* √âcris un programme Python qui effectue les op√©rations suivantes :\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. Corriger la valeur associ√©e √† la cl√© \\\\\\\"RAM\\\\\\\" pour qu‚Äôelle devienne \\\\\\\"32G\\\\\\\".\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. Afficher successivement :\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"3. La liste des cl√©s du dictionnaire\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"4. La liste des valeurs\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"5. La liste des paires cl√©-valeur\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"6. Inverser les paires \\\\\\\"Processeur\\\\\\\" : \\\\\\\"Intel core i7-G11\\\\\\\" et \\\\\\\"Carte Graphique\\\\\\\" : \\\\\\\"GeForce RTX 3070\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"7. Ajouter la paire cl√©-valeur suivante : \\\\\\\"Syst√®me d‚Äôexploitation\\\\\\\": \\\\\\\"Windows 10\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"- *Parti 2:* On consid√®re le dictionnaire suivant dont les cl√©s sont les noms des √©l√®ves et les valeurs des cl√©s sont les moyennes g√©n√©rales obtenues en passant l‚Äôexamen final.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<code>notes_eleves = { \\\\\\\"Amine\\\\\\\": 15.5, \\\\\\\"Yassine\\\\\\\": 19.0, \\\\\\\"Reda\\\\\\\": 14.2, \\\\\\\"Malak\\\\\\\": 8.7, \\\\\\\"Manal\\\\\\\": 20.0, \\\\\\\"Ahmed\\\\\\\": 7.5,\\\\\\\"Saad\\\\\\\": 11.3, \\\\\\\"Hannae\\\\\\\": 9.8 }</code>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcrire un programme Python qui partitionne ce dictionnaire en deux sous dictionnaires :\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* etudiantAdmis dont les cl√©s sont les √©tudiants admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne sup√©rieures ou √©gales √† 10 ).\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* etudiantNonAdmis dont les cl√©s sont les √©tudiants non admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne inf√©rieur ou √©gale √† 10). \\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 10,\\n\",\n",
      "      \"   \\\"id\\\": \\\"0fc954a1\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"Appareil:Laptop\\\\n\\\",\\n\",\n",
      "      \"      \\\"Marque:IBM\\\\n\\\",\\n\",\n",
      "      \"      \\\"Carte m√®re:MSI Z490\\\\n\\\",\\n\",\n",
      "      \"      \\\"Carte Graphique:GeForce RTX 3070\\\\n\\\",\\n\",\n",
      "      \"      \\\"RAM:32G\\\\n\\\",\\n\",\n",
      "      \"      \\\"Processeur:Intel core i7-G11\\\\n\\\",\\n\",\n",
      "      \"      \\\"SSD:1 To\\\\n\\\",\\n\",\n",
      "      \"      \\\"{'Appareil': 'Laptop', 'Marque': 'IBM', 'Carte m√®re': 'MSI Z490', 'Carte Graphique': 'GeForce RTX 3070', 'RAM': '32G', 'Processeur': 'Intel core i7-G11', 'SSD': '1 To', 'Syst√®me d‚Äôexploitation': 'Windows 10'}\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"First_dict = { \\\\\\\"Appareil\\\\\\\": \\\\\\\"Laptop\\\\\\\", \\\\\\\"Marque\\\\\\\": \\\\\\\"IBM\\\\\\\", \\\\\\\"Carte m√®re\\\\\\\": \\\\\\\"MSI Z490\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"    \\\"               \\\\\\\"Carte Graphique\\\\\\\":\\\\\\\"GeForce RTX 3070\\\\\\\", \\\\\\\"RAM\\\\\\\": \\\\\\\"16G\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"    \\\"               \\\\\\\"Processeur\\\\\\\": \\\\\\\"Intel core i7-G11\\\\\\\", \\\\\\\"SSD\\\\\\\": \\\\\\\"1 To\\\\\\\" } \\\\n\\\",\\n\",\n",
      "      \"    \\\"    # ex1\\\\n\\\",\\n\",\n",
      "      \"    \\\"First_dict[\\\\\\\"RAM\\\\\\\"]=\\\\\\\"32G\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # ex2 et 3\\\\n\\\",\\n\",\n",
      "      \"    \\\"# for k in First_dict:\\\\n\\\",\\n\",\n",
      "      \"    \\\"#     print(k)\\\\n\\\",\\n\",\n",
      "      \"    \\\"#     print(First_dict[k])\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # ex 4\\\\n\\\",\\n\",\n",
      "      \"    \\\"for key , value in First_dict.items():\\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(f\\\\\\\"{key}:{value}\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    #  ex 5\\\\n\\\",\\n\",\n",
      "      \"    \\\"     \\\\n\\\",\\n\",\n",
      "      \"    \\\"    #  ex 6\\\\n\\\",\\n\",\n",
      "      \"    \\\"First_dict[\\\\\\\"Syst√®me d‚Äôexploitation\\\\\\\"]=\\\\\\\"Windows 10\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"        \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(First_dict)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 16,\\n\",\n",
      "      \"   \\\"id\\\": \\\"c50b65e4\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"{'Amine': 15.5, 'Yassine': 19.0, 'Reda': 14.2, 'Manal': 20.0, 'Saad': 11.3} {'Malak': 8.7, 'Ahmed': 7.5, 'Hannae': 9.8}\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"notes_eleves = { \\\\\\\"Amine\\\\\\\": 15.5, \\\\\\\"Yassine\\\\\\\": 19.0, \\\\\\\"Reda\\\\\\\": 14.2, \\\\\\\"Malak\\\\\\\": 8.7, \\\\\\\"Manal\\\\\\\": 20.0, \\\\\\\"Ahmed\\\\\\\": 7.5,\\\\\\\"Saad\\\\\\\": 11.3, \\\\\\\"Hannae\\\\\\\": 9.8 }\\\\n\\\",\\n\",\n",
      "      \"    \\\"etudiantsAdmis={}\\\\n\\\",\\n\",\n",
      "      \"    \\\"etudiantsNonAdmis={}\\\\n\\\",\\n\",\n",
      "      \"    \\\"for k in notes_eleves:\\\\n\\\",\\n\",\n",
      "      \"    \\\"    if notes_eleves[k] >= 10 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        etudiantsAdmis[k]=notes_eleves[k]\\\\n\\\",\\n\",\n",
      "      \"    \\\"    else:\\\\n\\\",\\n\",\n",
      "      \"    \\\"        etudiantsNonAdmis[k]=notes_eleves[k]\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(etudiantsAdmis,etudiantsNonAdmis)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"7ab8effa\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 2 : Mise √† Jour de Dictionnaires</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Fusionner plusieurs dictionnaires en un seul.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez update() pour fusionner trois dictionnaires diff√©rents.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Affichez le dictionnaire final avec toutes les cl√©s et valeurs combin√©es.\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 22,\\n\",\n",
      "      \"   \\\"id\\\": \\\"85cd8892\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"Dictionnaire fusionn√© : {'nom': 'Malika', 'age': 21, 'pays': 'Maroc', 'formation': 'D√©veloppement digital'}\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"dict1 = {\\\\\\\"nom\\\\\\\": \\\\\\\"Malika\\\\\\\", \\\\\\\"age\\\\\\\": 22}\\\\n\\\",\\n\",\n",
      "      \"    \\\"dict2 = {\\\\\\\"pays\\\\\\\": \\\\\\\"Maroc\\\\\\\"}\\\\n\\\",\\n\",\n",
      "      \"    \\\"dict3 = {\\\\\\\"formation\\\\\\\": \\\\\\\"D√©veloppement digital\\\\\\\"}\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"resultat = dict1.copy()   \\\\n\\\",\\n\",\n",
      "      \"    \\\"resultat.update(dict2)    \\\\n\\\",\\n\",\n",
      "      \"    \\\"resultat.update(dict3)   \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(\\\\\\\"Dictionnaire fusionn√© :\\\\\\\", resultat)\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"c5dd1c26\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 3 : Conversion de Deux Listes en Dictionnaire</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Cr√©er un dictionnaire √† partir de deux listes (une pour les cl√©s, une pour les valeurs).\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez zip() pour combiner les deux listes.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Convertissez le r√©sultat en dictionnaire.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Affichez le dictionnaire cr√©√©.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 24,\\n\",\n",
      "      \"   \\\"id\\\": \\\"2663dae7\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"{'nom': 'Malika', 'prenom': 'EL ABIAD', 'age': 22, 'formation': 'YOUCODE'}\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"key=[\\\\\\\"nom\\\\\\\",\\\\\\\"prenom\\\\\\\",\\\\\\\"age\\\\\\\",\\\\\\\"formation\\\\\\\"]\\\\n\\\",\\n\",\n",
      "      \"    \\\"value=[\\\\\\\"Malika\\\\\\\",\\\\\\\"EL ABIAD\\\\\\\",22,\\\\\\\"YOUCODE\\\\\\\"]\\\\n\\\",\\n\",\n",
      "      \"    \\\"dictionnaire=dict(zip(key,value))\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(dictionnaire)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"b64cf938\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 4 : Tri d'un Dictionnaire</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Trier un dictionnaire selon ses valeurs.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez items() pour obtenir les paires cl√©-valeur.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Triez ces paires par valeur.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Cr√©ez un nouveau dictionnaire √† partir des paires tri√©es.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"09480797\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"[('Amine', 15.5), ('Yassine', 19.0), ('Reda', 14.2), ('Malak', 8.7), ('Manal', 20.0), ('Ahmed', 7.5), ('Saad', 11.3), ('Hannae', 9.8)]\\\\n\\\",\\n\",\n",
      "      \"      \\\"Manal : 20.0\\\\n\\\",\\n\",\n",
      "      \"      \\\"Yassine : 19.0\\\\n\\\",\\n\",\n",
      "      \"      \\\"Amine : 15.5\\\\n\\\",\\n\",\n",
      "      \"      \\\"Reda : 14.2\\\\n\\\",\\n\",\n",
      "      \"      \\\"Saad : 11.3\\\\n\\\",\\n\",\n",
      "      \"      \\\"Hannae : 9.8\\\\n\\\",\\n\",\n",
      "      \"      \\\"Malak : 8.7\\\\n\\\",\\n\",\n",
      "      \"      \\\"Ahmed : 7.5\\\\n\\\",\\n\",\n",
      "      \"      \\\"{'Manal': 20.0, 'Yassine': 19.0, 'Amine': 15.5, 'Reda': 14.2, 'Saad': 11.3, 'Hannae': 9.8, 'Malak': 8.7, 'Ahmed': 7.5}\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"notes = { \\\\\\\"Amine\\\\\\\": 15.5, \\\\\\\"Yassine\\\\\\\": 19.0, \\\\\\\"Reda\\\\\\\": 14.2, \\\\\\\"Malak\\\\\\\": 8.7, \\\\\\\"Manal\\\\\\\": 20.0, \\\\\\\"Ahmed\\\\\\\": 7.5,\\\\\\\"Saad\\\\\\\": 11.3, \\\\\\\"Hannae\\\\\\\": 9.8 }\\\\n\\\",\\n\",\n",
      "      \"    \\\"items=list(notes.items())\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(items)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"for i in range(len(items)):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    for j in range(i+1, len(items)):\\\\n\\\",\\n\",\n",
      "      \"    \\\"        if items[j][1] > items[i][1]:\\\\n\\\",\\n\",\n",
      "      \"    \\\"            temp = items[i]\\\\n\\\",\\n\",\n",
      "      \"    \\\"            items[i] = items[j]\\\\n\\\",\\n\",\n",
      "      \"    \\\"            items[j] = temp\\\\n\\\",\\n\",\n",
      "      \"    \\\"for nom , notes in items:\\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(f\\\\\\\"{nom} : {notes}\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"trie=dict(items)\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(trie)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"2c429ffc\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 5 : Manipulation de tuples </span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Comprendre la structure des tuples, leur immutabilit√©, et leur utilisation pour stocker des donn√©es group√©es et ordonn√©es.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Cr√©e un tuple nomm√© etudiant_info contenant les informations suivantes dans cet ordre : Pr√©nom : \\\\\\\"Yasmine\\\\\\\", √Çge : 22, Fili√®re : \\\\\\\"Informatique\\\\\\\", Moyenne g√©n√©rale : 17.4\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Affiche les informations stock√©es dans le tuple, une par ligne, avec un texte explicite. (ex: ‚ÄúPr√©nom : Yasmine‚Äù)\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Tente de modifier la fili√®re dans le tuple. Que se passe-t-il ? Explique pourquoi.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilise l'op√©rateur de slicing pour afficher uniquement le pr√©nom et l'√¢ge.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Cr√©e un nouveau tuple en combinant etudiant_info avec un second tuple contenant la mention \\\\\\\"Tr√®s Bien\\\\\\\" et l‚Äôann√©e d‚Äôobtention du dipl√¥me (2024), puis affiche le tuple final.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"1e59354d\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"etudiant_info = (\\\\\\\"Yasmine\\\\\\\",22,\\\\\\\"Informatique\\\\\\\",17.4)\\\\n\\\",\\n\",\n",
      "      \"    \\\"etudiant_key=(\\\\\\\"Pr√©nom\\\\\\\",\\\\\\\"Age\\\\\\\",\\\\\\\"Fili√®re\\\\\\\",\\\\\\\"Moyenne g√©n√©rale\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"bdb88a19\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": []\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" ],\\n\",\n",
      "      \" \\\"metadata\\\": {\\n\",\n",
      "      \"  \\\"kernelspec\\\": {\\n\",\n",
      "      \"   \\\"display_name\\\": \\\"Python 3\\\",\\n\",\n",
      "      \"   \\\"language\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python3\\\"\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  \\\"language_info\\\": {\\n\",\n",
      "      \"   \\\"codemirror_mode\\\": {\\n\",\n",
      "      \"    \\\"name\\\": \\\"ipython\\\",\\n\",\n",
      "      \"    \\\"version\\\": 3\\n\",\n",
      "      \"   },\\n\",\n",
      "      \"   \\\"file_extension\\\": \\\".py\\\",\\n\",\n",
      "      \"   \\\"mimetype\\\": \\\"text/x-python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"nbconvert_exporter\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"pygments_lexer\\\": \\\"ipython3\\\",\\n\",\n",
      "      \"   \\\"version\\\": \\\"3.13.7\\\"\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" },\\n\",\n",
      "      \" \\\"nbformat\\\": 4,\\n\",\n",
      "      \" \\\"nbformat_minor\\\": 5\\n\",\n",
      "      \"}\\n\",\n",
      "      \"\\n\",\n",
      "      \"--- Lecture de Fichiers.ipynb ---\\n\",\n",
      "      \"{\\n\",\n",
      "      \" \\\"cells\\\": [\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"784cad32\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H1><span style=\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\">Gestion de Fichiers</span></H1>\\\\n\\\",\\n\",\n",
      "      \"    \\\"</center>\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"00451f59\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\">Les ressources: </span></H3> \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/inputoutput.html#reading-and-writing-files)\\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Reading and Writing Files in Python](https://realpython.com/read-write-files-python/)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"3d2ea4b9\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 1 : Extraction et Traitement de Fichiers</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Lire plusieurs fichiers texte et combiner leur contenu.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez os.listdir() pour lister tous les fichiers texte dans un r√©pertoire.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez open() pour lire chaque fichier et extraire son contenu.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Combinez le contenu de tous les fichiers en un seul texte.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 15,\\n\",\n",
      "      \"   \\\"id\\\": \\\"21b6f2cb\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"['.git', 'Dictionnaires_Tuples.ipynb', 'Fichiers.ipynb', 'Fonctions.ipynb', 'Les_Bases.ipynb', 'Listes.ipynb', 'README.md']\\\\n\\\",\\n\",\n",
      "      \"      \\\"--- Ignor√© (ce n'est pas un fichier) : .git ---\\\\n\\\",\\n\",\n",
      "      \"      \\\"--- Lecture de Dictionnaires_Tuples.ipynb ---\\\\n\\\",\\n\",\n",
      "      \"      \\\"{\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"cells\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"914e84e2\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H1><span style=\\\\\\\\\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\\\\\\\\\">Les Dictionnaires & Tuples</span></H1>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"</center>\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"4904b5d8\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\\\\\\\\\">Les ressources: </span></H3> \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"**Documentation Officielle** : \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Dictionnaires](https://docs.python.org/fr/3/tutorial/datastructures.html#dictionaries) \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Tuples](https://docs.python.org/fr/3/tutorial/datastructures.html#tuples-and-sequences)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"6ba65839\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 1 : Manipulation des dictionnaires Python</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Apprendre √† manipuler des dictionnaires en Python √† travers plusieurs op√©rations cl√©s\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Consid√©rons le dictionnaire suivant :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<code>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"First_dict = { \\\\\\\\\\\\\\\"Appareil\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Laptop\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Marque\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"IBM\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Carte m√®re\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"MSI Z490\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Carte Graphique\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"GeForce RTX 3070\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"RAM\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"16G\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Processeur\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Intel core i7-G11\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"SSD\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"1 To\\\\\\\\\\\\\\\" }    </code>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- *Parti 1:* √âcris un programme Python qui effectue les op√©rations suivantes :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. Corriger la valeur associ√©e √† la cl√© \\\\\\\\\\\\\\\"RAM\\\\\\\\\\\\\\\" pour qu‚Äôelle devienne \\\\\\\\\\\\\\\"32G\\\\\\\\\\\\\\\".\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. Afficher successivement :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"3. La liste des cl√©s du dictionnaire\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"4. La liste des valeurs\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"5. La liste des paires cl√©-valeur\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"6. Inverser les paires \\\\\\\\\\\\\\\"Processeur\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Intel core i7-G11\\\\\\\\\\\\\\\" et \\\\\\\\\\\\\\\"Carte Graphique\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"GeForce RTX 3070\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"7. Ajouter la paire cl√©-valeur suivante : \\\\\\\\\\\\\\\"Syst√®me d‚Äôexploitation\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Windows 10\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- *Parti 2:* On consid√®re le dictionnaire suivant dont les cl√©s sont les noms des √©l√®ves et les valeurs des cl√©s sont les moyennes g√©n√©rales obtenues en passant l‚Äôexamen final.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<code>notes_eleves = { \\\\\\\\\\\\\\\"Amine\\\\\\\\\\\\\\\": 15.5, \\\\\\\\\\\\\\\"Yassine\\\\\\\\\\\\\\\": 19.0, \\\\\\\\\\\\\\\"Reda\\\\\\\\\\\\\\\": 14.2, \\\\\\\\\\\\\\\"Malak\\\\\\\\\\\\\\\": 8.7, \\\\\\\\\\\\\\\"Manal\\\\\\\\\\\\\\\": 20.0, \\\\\\\\\\\\\\\"Ahmed\\\\\\\\\\\\\\\": 7.5,\\\\\\\\\\\\\\\"Saad\\\\\\\\\\\\\\\": 11.3, \\\\\\\\\\\\\\\"Hannae\\\\\\\\\\\\\\\": 9.8 }</code>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcrire un programme Python qui partitionne ce dictionnaire en deux sous dictionnaires :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* etudiantAdmis dont les cl√©s sont les √©tudiants admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne sup√©rieures ou √©gales √† 10 ).\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* etudiantNonAdmis dont les cl√©s sont les √©tudiants non admis et les valeurs des cl√©s sont les moyennes obtenues (moyenne inf√©rieur ou √©gale √† 10). \\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 10,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"0fc954a1\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Appareil:Laptop\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Marque:IBM\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Carte m√®re:MSI Z490\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Carte Graphique:GeForce RTX 3070\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"RAM:32G\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Processeur:Intel core i7-G11\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"SSD:1 To\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"{'Appareil': 'Laptop', 'Marque': 'IBM', 'Carte m√®re': 'MSI Z490', 'Carte Graphique': 'GeForce RTX 3070', 'RAM': '32G', 'Processeur': 'Intel core i7-G11', 'SSD': '1 To', 'Syst√®me d‚Äôexploitation': 'Windows 10'}\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"First_dict = { \\\\\\\\\\\\\\\"Appareil\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Laptop\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Marque\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"IBM\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Carte m√®re\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"MSI Z490\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"               \\\\\\\\\\\\\\\"Carte Graphique\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"GeForce RTX 3070\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"RAM\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"16G\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"               \\\\\\\\\\\\\\\"Processeur\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Intel core i7-G11\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"SSD\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"1 To\\\\\\\\\\\\\\\" } \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # ex1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"First_dict[\\\\\\\\\\\\\\\"RAM\\\\\\\\\\\\\\\"]=\\\\\\\\\\\\\\\"32G\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # ex2 et 3\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"# for k in First_dict:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"#     print(k)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"#     print(First_dict[k])\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # ex 4\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for key , value in First_dict.items():\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(f\\\\\\\\\\\\\\\"{key}:{value}\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    #  ex 5\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"     \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    #  ex 6\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"First_dict[\\\\\\\\\\\\\\\"Syst√®me d‚Äôexploitation\\\\\\\\\\\\\\\"]=\\\\\\\\\\\\\\\"Windows 10\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(First_dict)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 16,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"c50b65e4\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"{'Amine': 15.5, 'Yassine': 19.0, 'Reda': 14.2, 'Manal': 20.0, 'Saad': 11.3} {'Malak': 8.7, 'Ahmed': 7.5, 'Hannae': 9.8}\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"notes_eleves = { \\\\\\\\\\\\\\\"Amine\\\\\\\\\\\\\\\": 15.5, \\\\\\\\\\\\\\\"Yassine\\\\\\\\\\\\\\\": 19.0, \\\\\\\\\\\\\\\"Reda\\\\\\\\\\\\\\\": 14.2, \\\\\\\\\\\\\\\"Malak\\\\\\\\\\\\\\\": 8.7, \\\\\\\\\\\\\\\"Manal\\\\\\\\\\\\\\\": 20.0, \\\\\\\\\\\\\\\"Ahmed\\\\\\\\\\\\\\\": 7.5,\\\\\\\\\\\\\\\"Saad\\\\\\\\\\\\\\\": 11.3, \\\\\\\\\\\\\\\"Hannae\\\\\\\\\\\\\\\": 9.8 }\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"etudiantsAdmis={}\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"etudiantsNonAdmis={}\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for k in notes_eleves:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    if notes_eleves[k] >= 10 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        etudiantsAdmis[k]=notes_eleves[k]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    else:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        etudiantsNonAdmis[k]=notes_eleves[k]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(etudiantsAdmis,etudiantsNonAdmis)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"7ab8effa\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 2 : Mise √† Jour de Dictionnaires</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Fusionner plusieurs dictionnaires en un seul.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez update() pour fusionner trois dictionnaires diff√©rents.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Affichez le dictionnaire final avec toutes les cl√©s et valeurs combin√©es.\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 22,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"85cd8892\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Dictionnaire fusionn√© : {'nom': 'Malika', 'age': 21, 'pays': 'Maroc', 'formation': 'D√©veloppement digital'}\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"dict1 = {\\\\\\\\\\\\\\\"nom\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Malika\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"age\\\\\\\\\\\\\\\": 22}\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"dict2 = {\\\\\\\\\\\\\\\"pays\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Maroc\\\\\\\\\\\\\\\"}\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"dict3 = {\\\\\\\\\\\\\\\"formation\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"D√©veloppement digital\\\\\\\\\\\\\\\"}\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"resultat = dict1.copy()   \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"resultat.update(dict2)    \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"resultat.update(dict3)   \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(\\\\\\\\\\\\\\\"Dictionnaire fusionn√© :\\\\\\\\\\\\\\\", resultat)\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"c5dd1c26\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 3 : Conversion de Deux Listes en Dictionnaire</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Cr√©er un dictionnaire √† partir de deux listes (une pour les cl√©s, une pour les valeurs).\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez zip() pour combiner les deux listes.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Convertissez le r√©sultat en dictionnaire.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Affichez le dictionnaire cr√©√©.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 24,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"2663dae7\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"{'nom': 'Malika', 'prenom': 'EL ABIAD', 'age': 22, 'formation': 'YOUCODE'}\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"key=[\\\\\\\\\\\\\\\"nom\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"prenom\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"age\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"formation\\\\\\\\\\\\\\\"]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"value=[\\\\\\\\\\\\\\\"Malika\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"EL ABIAD\\\\\\\\\\\\\\\",22,\\\\\\\\\\\\\\\"YOUCODE\\\\\\\\\\\\\\\"]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"dictionnaire=dict(zip(key,value))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(dictionnaire)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"b64cf938\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 4 : Tri d'un Dictionnaire</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Trier un dictionnaire selon ses valeurs.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez items() pour obtenir les paires cl√©-valeur.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Triez ces paires par valeur.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Cr√©ez un nouveau dictionnaire √† partir des paires tri√©es.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"09480797\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"[('Amine', 15.5), ('Yassine', 19.0), ('Reda', 14.2), ('Malak', 8.7), ('Manal', 20.0), ('Ahmed', 7.5), ('Saad', 11.3), ('Hannae', 9.8)]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Manal : 20.0\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Yassine : 19.0\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Amine : 15.5\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Reda : 14.2\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Saad : 11.3\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Hannae : 9.8\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Malak : 8.7\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Ahmed : 7.5\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"{'Manal': 20.0, 'Yassine': 19.0, 'Amine': 15.5, 'Reda': 14.2, 'Saad': 11.3, 'Hannae': 9.8, 'Malak': 8.7, 'Ahmed': 7.5}\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"notes = { \\\\\\\\\\\\\\\"Amine\\\\\\\\\\\\\\\": 15.5, \\\\\\\\\\\\\\\"Yassine\\\\\\\\\\\\\\\": 19.0, \\\\\\\\\\\\\\\"Reda\\\\\\\\\\\\\\\": 14.2, \\\\\\\\\\\\\\\"Malak\\\\\\\\\\\\\\\": 8.7, \\\\\\\\\\\\\\\"Manal\\\\\\\\\\\\\\\": 20.0, \\\\\\\\\\\\\\\"Ahmed\\\\\\\\\\\\\\\": 7.5,\\\\\\\\\\\\\\\"Saad\\\\\\\\\\\\\\\": 11.3, \\\\\\\\\\\\\\\"Hannae\\\\\\\\\\\\\\\": 9.8 }\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"items=list(notes.items())\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(items)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for i in range(len(items)):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for j in range(i+1, len(items)):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        if items[j][1] > items[i][1]:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            temp = items[i]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            items[i] = items[j]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            items[j] = temp\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for nom , notes in items:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(f\\\\\\\\\\\\\\\"{nom} : {notes}\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"trie=dict(items)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(trie)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"2c429ffc\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 5 : Manipulation de tuples </span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Comprendre la structure des tuples, leur immutabilit√©, et leur utilisation pour stocker des donn√©es group√©es et ordonn√©es.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Cr√©e un tuple nomm√© etudiant_info contenant les informations suivantes dans cet ordre : Pr√©nom : \\\\\\\\\\\\\\\"Yasmine\\\\\\\\\\\\\\\", √Çge : 22, Fili√®re : \\\\\\\\\\\\\\\"Informatique\\\\\\\\\\\\\\\", Moyenne g√©n√©rale : 17.4\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Affiche les informations stock√©es dans le tuple, une par ligne, avec un texte explicite. (ex: ‚ÄúPr√©nom : Yasmine‚Äù)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Tente de modifier la fili√®re dans le tuple. Que se passe-t-il ? Explique pourquoi.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilise l'op√©rateur de slicing pour afficher uniquement le pr√©nom et l'√¢ge.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Cr√©e un nouveau tuple en combinant etudiant_info avec un second tuple contenant la mention \\\\\\\\\\\\\\\"Tr√®s Bien\\\\\\\\\\\\\\\" et l‚Äôann√©e d‚Äôobtention du dipl√¥me (2024), puis affiche le tuple final.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"1e59354d\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"etudiant_info = (\\\\\\\\\\\\\\\"Yasmine\\\\\\\\\\\\\\\",22,\\\\\\\\\\\\\\\"Informatique\\\\\\\\\\\\\\\",17.4)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"etudiant_key=(\\\\\\\\\\\\\\\"Pr√©nom\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Age\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Fili√®re\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Moyenne g√©n√©rale\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"bdb88a19\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": []\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" ],\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"metadata\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"kernelspec\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"display_name\\\\\\\": \\\\\\\"Python 3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"language\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python3\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"language_info\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"codemirror_mode\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"name\\\\\\\": \\\\\\\"ipython\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"version\\\\\\\": 3\\\\n\\\",\\n\",\n",
      "      \"      \\\"   },\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"file_extension\\\\\\\": \\\\\\\".py\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"mimetype\\\\\\\": \\\\\\\"text/x-python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"nbconvert_exporter\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"pygments_lexer\\\\\\\": \\\\\\\"ipython3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"version\\\\\\\": \\\\\\\"3.13.7\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" },\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat\\\\\\\": 4,\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat_minor\\\\\\\": 5\\\\n\\\",\\n\",\n",
      "      \"      \\\"}\\\\n\\\",\\n\",\n",
      "      \"      \\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"--- Lecture de Fichiers.ipynb ---\\\\n\\\",\\n\",\n",
      "      \"      \\\"{\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"cells\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"784cad32\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H1><span style=\\\\\\\\\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\\\\\\\\\">Gestion de Fichiers</span></H1>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"</center>\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"00451f59\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\\\\\\\\\">Les ressources: </span></H3> \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/inputoutput.html#reading-and-writing-files)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Reading and Writing Files in Python](https://realpython.com/read-write-files-python/)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"3d2ea4b9\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 1 : Extraction et Traitement de Fichiers</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Lire plusieurs fichiers texte et combiner leur contenu.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez os.listdir() pour lister tous les fichiers texte dans un r√©pertoire.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez open() pour lire chaque fichier et extraire son contenu.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Combinez le contenu de tous les fichiers en un seul texte.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 13,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"21b6f2cb\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"['.git', 'Dictionnaires_Tuples.ipynb', 'Fichiers.ipynb', 'Fonctions.ipynb', 'Les_Bases.ipynb', 'Listes.ipynb', 'README.md']\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"--- Lecture de .git ---\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    },\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"ename\\\\\\\": \\\\\\\"PermissionError\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"evalue\\\\\\\": \\\\\\\"[Errno 13] Permission denied: 'C:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\elabi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\OneDrive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Desktop\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Challenge\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\WarmUp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.git'\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"error\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"traceback\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"\\\\\\\\u001b[31m---------------------------------------------------------------------------\\\\\\\\u001b[39m\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"\\\\\\\\u001b[31mPermissionError\\\\\\\\u001b[39m                           Traceback (most recent call last)\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"\\\\\\\\u001b[36mCell\\\\\\\\u001b[39m\\\\\\\\u001b[36m \\\\\\\\u001b[39m\\\\\\\\u001b[32mIn[13]\\\\\\\\u001b[39m\\\\\\\\u001b[32m, line 9\\\\\\\\u001b[39m\\\\\\\\n\\\\\\\\u001b[32m      6\\\\\\\\u001b[39m \\\\\\\\u001b[38;5;28mprint\\\\\\\\u001b[39m(\\\\\\\\u001b[33mf\\\\\\\\u001b[39m\\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m\\\\\\\\u001b[33m--- Lecture de \\\\\\\\u001b[39m\\\\\\\\u001b[38;5;132;01m{\\\\\\\\u001b[39;00mfichier\\\\\\\\u001b[38;5;132;01m}\\\\\\\\u001b[39;00m\\\\\\\\u001b[33m ---\\\\\\\\u001b[39m\\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m)\\\\\\\\n\\\\\\\\u001b[32m      7\\\\\\\\u001b[39m chemin_complet = os.path.join(repertoire, fichier)\\\\\\\\n\\\\\\\\u001b[32m----> \\\\\\\\u001b[39m\\\\\\\\u001b[32m9\\\\\\\\u001b[39m \\\\\\\\u001b[38;5;28;01mwith\\\\\\\\u001b[39;00m \\\\\\\\u001b[38;5;28;43mopen\\\\\\\\u001b[39;49m\\\\\\\\u001b[43m(\\\\\\\\u001b[49m\\\\\\\\u001b[43mchemin_complet\\\\\\\\u001b[49m\\\\\\\\u001b[43m,\\\\\\\\u001b[49m\\\\\\\\u001b[43m \\\\\\\\u001b[49m\\\\\\\\u001b[33;43m'\\\\\\\\u001b[39;49m\\\\\\\\u001b[33;43mr\\\\\\\\u001b[39;49m\\\\\\\\u001b[33;43m'\\\\\\\\u001b[39;49m\\\\\\\\u001b[43m,\\\\\\\\u001b[49m\\\\\\\\u001b[43m \\\\\\\\u001b[49m\\\\\\\\u001b[43mencoding\\\\\\\\u001b[49m\\\\\\\\u001b[43m=\\\\\\\\u001b[49m\\\\\\\\u001b[33;43m'\\\\\\\\u001b[39;49m\\\\\\\\u001b[33;43mutf-8\\\\\\\\u001b[39;49m\\\\\\\\u001b[33;43m'\\\\\\\\u001b[39;49m\\\\\\\\u001b[43m)\\\\\\\\u001b[49m \\\\\\\\u001b[38;5;28;01mas\\\\\\\\u001b[39;00m fichiers:\\\\\\\\n\\\\\\\\u001b[32m     10\\\\\\\\u001b[39m     contenu = fichiers.read()\\\\\\\\n\\\\\\\\u001b[32m     11\\\\\\\\u001b[39m     \\\\\\\\u001b[38;5;28mprint\\\\\\\\u001b[39m(contenu)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"\\\\\\\\u001b[36mFile \\\\\\\\u001b[39m\\\\\\\\u001b[32mc:\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\elabi\\\\\\\\\\\\\\\\AppData\\\\\\\\\\\\\\\\Local\\\\\\\\\\\\\\\\Programs\\\\\\\\\\\\\\\\Python\\\\\\\\\\\\\\\\Python313\\\\\\\\\\\\\\\\Lib\\\\\\\\\\\\\\\\site-packages\\\\\\\\\\\\\\\\IPython\\\\\\\\\\\\\\\\core\\\\\\\\\\\\\\\\interactiveshell.py:343\\\\\\\\u001b[39m, in \\\\\\\\u001b[36m_modified_open\\\\\\\\u001b[39m\\\\\\\\u001b[34m(file, *args, **kwargs)\\\\\\\\u001b[39m\\\\\\\\n\\\\\\\\u001b[32m    336\\\\\\\\u001b[39m \\\\\\\\u001b[38;5;28;01mif\\\\\\\\u001b[39;00m file \\\\\\\\u001b[38;5;129;01min\\\\\\\\u001b[39;00m {\\\\\\\\u001b[32m0\\\\\\\\u001b[39m, \\\\\\\\u001b[32m1\\\\\\\\u001b[39m, \\\\\\\\u001b[32m2\\\\\\\\u001b[39m}:\\\\\\\\n\\\\\\\\u001b[32m    337\\\\\\\\u001b[39m     \\\\\\\\u001b[38;5;28;01mraise\\\\\\\\u001b[39;00m \\\\\\\\u001b[38;5;167;01mValueError\\\\\\\\u001b[39;00m(\\\\\\\\n\\\\\\\\u001b[32m    338\\\\\\\\u001b[39m         \\\\\\\\u001b[33mf\\\\\\\\u001b[39m\\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m\\\\\\\\u001b[33mIPython won\\\\\\\\u001b[39m\\\\\\\\u001b[33m'\\\\\\\\u001b[39m\\\\\\\\u001b[33mt let you open fd=\\\\\\\\u001b[39m\\\\\\\\u001b[38;5;132;01m{\\\\\\\\u001b[39;00mfile\\\\\\\\u001b[38;5;132;01m}\\\\\\\\u001b[39;00m\\\\\\\\u001b[33m by default \\\\\\\\u001b[39m\\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m\\\\\\\\n\\\\\\\\u001b[32m    339\\\\\\\\u001b[39m         \\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m\\\\\\\\u001b[33mas it is likely to crash IPython. If you know what you are doing, \\\\\\\\u001b[39m\\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m\\\\\\\\n\\\\\\\\u001b[32m    340\\\\\\\\u001b[39m         \\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m\\\\\\\\u001b[33myou can use builtins\\\\\\\\u001b[39m\\\\\\\\u001b[33m'\\\\\\\\u001b[39m\\\\\\\\u001b[33m open.\\\\\\\\u001b[39m\\\\\\\\u001b[33m\\\\\\\\\\\\\\\"\\\\\\\\u001b[39m\\\\\\\\n\\\\\\\\u001b[32m    341\\\\\\\\u001b[39m     )\\\\\\\\n\\\\\\\\u001b[32m--> \\\\\\\\u001b[39m\\\\\\\\u001b[32m343\\\\\\\\u001b[39m \\\\\\\\u001b[38;5;28;01mreturn\\\\\\\\u001b[39;00m \\\\\\\\u001b[43mio_open\\\\\\\\u001b[49m\\\\\\\\u001b[43m(\\\\\\\\u001b[49m\\\\\\\\u001b[43mfile\\\\\\\\u001b[49m\\\\\\\\u001b[43m,\\\\\\\\u001b[49m\\\\\\\\u001b[43m \\\\\\\\u001b[49m\\\\\\\\u001b[43m*\\\\\\\\u001b[49m\\\\\\\\u001b[43margs\\\\\\\\u001b[49m\\\\\\\\u001b[43m,\\\\\\\\u001b[49m\\\\\\\\u001b[43m \\\\\\\\u001b[49m\\\\\\\\u001b[43m*\\\\\\\\u001b[49m\\\\\\\\u001b[43m*\\\\\\\\u001b[49m\\\\\\\\u001b[43mkwargs\\\\\\\\u001b[49m\\\\\\\\u001b[43m)\\\\\\\\u001b[49m\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"\\\\\\\\u001b[31mPermissionError\\\\\\\\u001b[39m: [Errno 13] Permission denied: 'C:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\elabi\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\OneDrive\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Desktop\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Challenge\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\WarmUp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.git'\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"import os \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"repertoire = r\\\\\\\\\\\\\\\"C:\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\elabi\\\\\\\\\\\\\\\\OneDrive\\\\\\\\\\\\\\\\Desktop\\\\\\\\\\\\\\\\Challenge\\\\\\\\\\\\\\\\WarmUp\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"contenue= os.listdir(repertoire)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(contenue)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for fichier in contenue:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        print(f\\\\\\\\\\\\\\\"--- Lecture de {fichier} ---\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        chemin_complet = os.path.join(repertoire, fichier)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        with open(chemin_complet, 'r', encoding='utf-8') as fichiers:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            contenu = fichiers.read()\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            print(contenu)\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"5240bc4e\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 2 : Recherche de Fichiers</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"V√©rifier l'existence de fichiers sp√©cifiques et les traiter.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez os.path.exists() pour v√©rifier si des fichiers de configuration (config.yaml) existent dans un r√©pertoire donn√©.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Si le fichier existe, ouvrez-le et affichez son contenu.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"fa5797e7\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"#  √âcrivez du code Python ici\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"c9850348\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 4 : Cr√©ation de R√©pertoires</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Cr√©er une structure de r√©pertoires √† partir d'une liste de noms.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez os.mkdir() pour cr√©er un r√©pertoire principal.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Cr√©ez plusieurs sous-r√©pertoires √† l'int√©rieur du r√©pertoire principal en utilisant une liste de noms.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"07f28968\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"#  √âcrivez du code Python ici\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"70d5c0f1\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 5 : Copie S√©lective de Fichiers</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Copier des fichiers sp√©cifiques d'un r√©pertoire √† un autre.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez os.listdir() pour lister tous les fichiers dans un r√©pertoire source.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez shutil.copy() pour copier uniquement les fichiers avec une extension sp√©cifique (par exemple, .csv) vers un r√©pertoire de destination.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"d723fec4\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"#  √âcrivez du code Python ici\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"860b9d43\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 6 : √âcriture de Fichiers</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcrire du contenu dans un fichier texte.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Utilisez open() en mode √©criture pour cr√©er un nouveau fichier texte.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* √âcrivez des lignes de texte dans le fichier en utilisant une boucle.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Fermez le fichier et v√©rifiez que les donn√©es ont √©t√© correctement enregistr√©es.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"bacbe689\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"#  √âcrivez du code Python ici\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"27cd8680\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": []\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" ],\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"metadata\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"kernelspec\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"display_name\\\\\\\": \\\\\\\"Python 3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"language\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python3\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"language_info\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"codemirror_mode\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"name\\\\\\\": \\\\\\\"ipython\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"version\\\\\\\": 3\\\\n\\\",\\n\",\n",
      "      \"      \\\"   },\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"file_extension\\\\\\\": \\\\\\\".py\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"mimetype\\\\\\\": \\\\\\\"text/x-python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"nbconvert_exporter\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"pygments_lexer\\\\\\\": \\\\\\\"ipython3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"version\\\\\\\": \\\\\\\"3.13.7\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" },\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat\\\\\\\": 4,\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat_minor\\\\\\\": 5\\\\n\\\",\\n\",\n",
      "      \"      \\\"}\\\\n\\\",\\n\",\n",
      "      \"      \\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"--- Lecture de Fonctions.ipynb ---\\\\n\\\",\\n\",\n",
      "      \"      \\\"{\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"cells\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"21dfa672\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H1><span style=\\\\\\\\\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\\\\\\\\\">Les Fonctions</span></H1>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"</center>\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"4280dbf3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\\\\\\\\\">Les ressources: </span></H3> \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Python Functions](https://realpython.com/defining-your-own-python-function/#abstraction)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/controlflow.html#defining-functions)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"e83d584f\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 1 : Pr√©sentation personnalis√©</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"R√©utiliser un programme existant (Challenge 2) en le structurant dans une fonction nomm√©e horaire_sup.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"R√©√©cris le programme du Challenge 2 dans une fonction appel√©e horaire_sup.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 2,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"b3439d44\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Votre salaire est :  4300.0\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def horaire_sup(nbrHr,shr):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    if nbrHr > 40 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        hrA = nbrHr - 40\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        remun = hrA * shr * 1.5\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        salaireReg = (shr * 40) + remun\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        print(\\\\\\\\\\\\\\\"Votre salaire est : \\\\\\\\\\\\\\\" ,salaireReg)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    else :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        salaireReg = shr * nbrHr\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        print(\\\\\\\\\\\\\\\"Votre salaire est : \\\\\\\\\\\\\\\" ,salaireReg)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"horaire_sup(42,100)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"77631c7d\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 2 : Fonction calculation() ‚Äì somme et diff√©rence</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Apprendre √† √©crire une fonction avec plusieurs param√®tres et plusieurs valeurs de retour.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcris une fonction calculation() qui prend deux arguments et calcule leur somme ainsi que leur diff√©rence. La fonction doit ensuite retourner les deux r√©sultats dans une seule instruction return.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 3,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"323a8b4a\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"data\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"text/plain\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\"(9, 1)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"      ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"     },\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"execution_count\\\\\\\": 3,\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"execute_result\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def calculation(a,b):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    somme = a+b\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    different = a-b\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    return somme,different\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"calculation(5,4)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"c2081304\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 3 : Mini-projets algorithmiques regroup√©s</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"D√©velopper plusieurs petites fonctions ind√©pendantes, chacune ciblant une comp√©tence pr√©cise\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- Demander √† l‚Äôutilisateur de saisir un nombre entier n et afficher la factorielle de ce nombre (n!).\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- Demander √† l‚Äôutilisateur un nombre entier m et afficher sa table de multiplication de 1 √† 10.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- Demander √† l‚Äôutilisateur un nombre entier L et indiquer s‚Äôil s‚Äôagit d‚Äôun carr√© parfait.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- Demander une cha√Æne de caract√®res √† l‚Äôutilisateur, puis afficher chaque caract√®re un par un.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- Demander une phrase √† l‚Äôutilisateur et afficher le mot le plus long de cette phrase.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- Demander une cha√Æne de caract√®res Ch et afficher le nombre d‚Äôoccurrences de chaque caract√®re. Exemple : Pour Ch = ‚Äúartificial intelligence developer‚Äù \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- Le programme doit afficher : Le caract√®re \\\\\\\\\\\\\\\"i\\\\\\\\\\\\\\\" figure 5 fois dans la cha√Æne Ch.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 3,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"a06adf5c\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"1*2 = 2\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"2*2 = 4\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"3*2 = 6\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"4*2 = 8\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"5*2 = 10\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"6*2 = 12\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"7*2 = 14\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"8*2 = 16\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"9*2 = 18\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"10*2 = 20\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"m\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"a\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"l\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"i\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"k\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"a\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Le mot le plus long est : intelligence avec une longueur de 12\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    },\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"data\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"text/plain\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\"{'a': 2,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'r': 2,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 't': 2,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'i': 5,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'f': 1,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'c': 2,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'l': 4,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" ' ': 2,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'n': 2,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'e': 6,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'g': 1,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'd': 1,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'v': 1,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'o': 1,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\" 'p': 1}\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"      ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"     },\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"execution_count\\\\\\\": 3,\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"execute_result\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"import math ;\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # Factorielle\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def factorielle(n):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    i=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    fact=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    while i <= n:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        fact*=i\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        i+=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    return fact   \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"factorielle(3) \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # Multiplication \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def multip(m):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    i=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    while i <= 10:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        print(f\\\\\\\\\\\\\\\"{i}*{m} = {i*m}\\\\\\\\\\\\\\\") \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        i+=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"multip(2)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # Carr√© parfait\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def carre(L):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    c=math.sqrt(L)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    cInt=int(c)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    if c-cInt == 0 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        return \\\\\\\\\\\\\\\"carre parfait\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    else :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        return \\\\\\\\\\\\\\\"carre non parfait\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"carre(5)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # chaine caractere un par un\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def chaine(ch):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for charctere in ch:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        print(charctere)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"chaine(\\\\\\\\\\\\\\\"malika\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # le mot le plus long\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def long(chaine):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    L = chaine.split()\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    max = L[0]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for element in L:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        if len(element) > len(max):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            max = element\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(\\\\\\\\\\\\\\\"Le mot le plus long est :\\\\\\\\\\\\\\\", max, \\\\\\\\\\\\\\\"avec une longueur de\\\\\\\\\\\\\\\", len(max))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"long(\\\\\\\\\\\\\\\"artificial intelligence developer\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    # Occurence de chaque caractere dans une chaine de caractere\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def occu(chaine):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    occurence={}\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for char in chaine :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        if char in occurence:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            occurence[char]+=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        else :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            occurence[char]=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    return occurence\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"occu(\\\\\\\\\\\\\\\"artificial intelligence developer\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"  \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" ],\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"metadata\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"kernelspec\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"display_name\\\\\\\": \\\\\\\"Python 3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"language\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python3\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"language_info\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"codemirror_mode\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"name\\\\\\\": \\\\\\\"ipython\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"version\\\\\\\": 3\\\\n\\\",\\n\",\n",
      "      \"      \\\"   },\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"file_extension\\\\\\\": \\\\\\\".py\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"mimetype\\\\\\\": \\\\\\\"text/x-python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"nbconvert_exporter\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"pygments_lexer\\\\\\\": \\\\\\\"ipython3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"version\\\\\\\": \\\\\\\"3.13.7\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" },\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat\\\\\\\": 4,\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat_minor\\\\\\\": 5\\\\n\\\",\\n\",\n",
      "      \"      \\\"}\\\\n\\\",\\n\",\n",
      "      \"      \\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"--- Lecture de Les_Bases.ipynb ---\\\\n\\\",\\n\",\n",
      "      \"      \\\"{\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"cells\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"6b58fb7c\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H1><span style=\\\\\\\\\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\\\\\\\\\">Les Bases De Python</span></H1>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"</center>\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"b2e95ccf\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<code>*Dans ces labs, vous d√©couvrirez et ma√Ætriserez les fondamentaux du langage Python, notamment la syntaxe de base, les types de donn√©es, les structures de contr√¥le (conditions, boucles), les fonctions et la gestion des modules. Vous apprendrez √©galement √† manipuler des collections (listes, dictionnaires, ensembles), √† lire et √©crire des fichiers, et √† utiliser les environnements virtuels. Ces comp√©tences vous permettront de d√©velopper vos premiers scripts et d‚Äôacqu√©rir une base solide pour aborder des projets plus avanc√©s en intelligence artificielle et en science des donn√©es.*</code>\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"8333f40b\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\\\\\\\\\">Les ressources: </span></H3> \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- **Conditions** : \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Python if/else Statements (Real Python)](https://realpython.com/python-conditional-statements/)  \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"*  [Documentation officielle ‚Äì if](https://docs.python.org/fr/3/tutorial/controlflow.html#if-statements-and-expressions)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- **Boucles** : \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Python Loops (Real Python)](https://realpython.com/python-for-loop/)  \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"*  [Documentation officielle ‚Äì for](https://docs.python.org/fr/3/tutorial/controlflow.html#for-statements)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"- **Try/Except** : \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Python Exceptions (Real Python)](https://realpython.com/python-exceptions/)  \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"*  [Documentation officielle ‚Äì exceptions](https://docs.python.org/fr/3/tutorial/errors.html#handling-exceptions)\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"ab1d155d\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 1 : Pr√©sentation personnalis√©e</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Apprendre √† utiliser la fonction input() pour interagir avec l‚Äôutilisateur et afficher une sortie personnalis√©e avec print().\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcris un programme qui demande √† l‚Äôutilisateur son pr√©nom et son √¢ge, puis affiche un message personnalis√© indiquant son pr√©nom et son √¢ge.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"751431f3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"nom = input(\\\\\\\\\\\\\\\"Entrez votre nom : \\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"age = int(input(\\\\\\\\\\\\\\\"Entrez votre age\\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(\\\\\\\\\\\\\\\"Votre nom est : \\\\\\\\\\\\\\\" , nom , \\\\\\\\\\\\\\\"Et votre age est : \\\\\\\\\\\\\\\" , age)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"e313a8c6\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge  2 : Calcul de salaire avec heures suppl√©mentaires</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Travailler la saisie de donn√©es utilisateur, les conversions de types, les conditions (if), et les op√©rations arithm√©tiques pour simuler un cas r√©el de calcul de paie. \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* √âcris un programme qui r√©cup√®re les informations suivantes depuis l‚Äôentr√©e utilisateur : son nom, son salaire horaire et le nombre d‚Äôheures qu‚Äôil a travaill√©es.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Si le nombre d‚Äôheures travaill√©es d√©passe 40 heures, les heures au-del√† de 40 seront consid√©r√©es comme des heures suppl√©mentaires et r√©mun√©r√©es √† 1,5 fois le salaire horaire normal.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* Le programme doit alors calculer le salaire total (salaire r√©gulier + √©ventuelles heures suppl√©mentaires).\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Enfin, affiche le nom de l‚Äôutilisateur ainsi que son salaire total calcul√©.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"93ec144e\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"nom = input(\\\\\\\\\\\\\\\"Entrez votre nom : \\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"shr= float(input(\\\\\\\\\\\\\\\"Entrez votre salaire horaire : \\\\\\\\\\\\\\\" ))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"nbrHr = int(input(\\\\\\\\\\\\\\\"Entrez les heures de travail : \\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"if nbrHr > 40 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    hrA = nbrHr - 40\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    remun = hrA * shr * 1.5\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    salaireReg = (shr * 40) + remun\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(\\\\\\\\\\\\\\\"Votre salaire est : \\\\\\\\\\\\\\\" ,salaireReg)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"else :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    salaireReg = shr * nbrHr\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(\\\\\\\\\\\\\\\"Votre salaire est : \\\\\\\\\\\\\\\" ,salaireReg)\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"9e2e052e\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 3 :  Gestion des erreurs utilisateur</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Introduire les blocs try / except afin de rendre le programme plus robuste face aux erreurs de saisie (par exemple, texte au lieu de nombres).\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"R√©√©cris ton programme de calcul de salaire en utilisant try et except afin que le programme g√®re proprement les entr√©es non num√©riques en affichant un message d‚Äôerreur puis en quittant le programme.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"a83ebcec\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"nom = input(\\\\\\\\\\\\\\\"Entrez votre nom : \\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"try :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    shr= float(input(\\\\\\\\\\\\\\\"Entrez votre salaire horaire : \\\\\\\\\\\\\\\" ))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    nbrHr = int(input(\\\\\\\\\\\\\\\"Entrez les heures de travail : \\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    if nbrHr > 40 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        hrA = nbrHr - 40\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        remun = hrA * shr * 1.5\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        salaireReg = (shr * 40) + remun\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        print(\\\\\\\\\\\\\\\"Votre salaire est : \\\\\\\\\\\\\\\" ,salaireReg)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    else :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        salaireReg = shr * nbrHr\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        print(\\\\\\\\\\\\\\\"Votre salaire est : \\\\\\\\\\\\\\\" ,salaireReg)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"except :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(\\\\\\\\\\\\\\\"Oops!  That was no valid number.  Try again...\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"7b34c3c1\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 4 : D√©terminer le signe d‚Äôun produit de deux nombres</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\" Amener l‚Äôapprenant √† manipuler les entr√©es utilisateur, les conditions (if/elif/else) et la logique math√©matique pour d√©terminer le signe du produit de deux nombres.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcrire un programme en Python qui demande √† l'utilisateur deux nombres n1 et n2 et lui indique ensuite si le produit de ces deux nombres est positif ou n√©gatif. On pr√©voit dans le programme le cas o√π le produit peut √™tre nul.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 1,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"91115272\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"Le produit de ces deux nombres est n√©gatif\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"n1 = int(input(\\\\\\\\\\\\\\\"Entrez le premier nombre : \\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"n2 = int(input(\\\\\\\\\\\\\\\"Entrez le deuxieme nombre\\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"produit = n1*n2\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"if produit < 0 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(\\\\\\\\\\\\\\\"Le produit de ces deux nombres est n√©gatif\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"else :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    print(\\\\\\\\\\\\\\\"Le produit de ces deux nombres est positif\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"e765cc2b\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 5 : Somme d‚Äôentiers</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Apprendre √† utiliser la boucle while pour r√©p√©ter une op√©ration jusqu‚Äô√† une condition donn√©e.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Ecrivez un programme en Python qui calcule la somme de 1 √† N, o√π N est saisi par l'utilisateur. En utilisant la boucle \\\\\\\\\\\\\\\"while\\\\\\\\\\\\\\\".\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 7,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"0de1f6c4\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"La somme de 0 √† 5 est 15\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"n = int(input(\\\\\\\\\\\\\\\"Entrer un nombre\\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"i = 1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"sum=0\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"while i<=n :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    sum+=i\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    i+=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(f\\\\\\\\\\\\\\\"La somme de 0 √† {n} est {sum}\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"7082952c\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 6 : Inverser une cha√Æne</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Comprendre la manipulation de cha√Ænes de caract√®res et l‚Äôusage de la boucle while pour parcourir une cha√Æne en sens inverse.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\" * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\" * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\" * Exemple: Cha√Æne originale: DevAI ==>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"   Cha√Æne invers√©e: IAveD\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 1,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"814c2390\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"akilam\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"chaine = input(\\\\\\\\\\\\\\\"Entrez une chaine de caractere\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"chaineinverse=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"i=len(chaine)-1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"while i>=0 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    chaineinverse+=chaine[i]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    i=i-1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(chaineinverse)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"0c27da2e\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 7 : Calcul de distance entre deux points</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"1. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Objectif</span> : </br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Apprendre √† manipuler les nombres flottants et √† appliquer une formule math√©matique en Python. Cet exercice permet d‚Äôutiliser l‚Äôentr√©e utilisateur <code>(input())</code>, la conversion de types <code>(float())</code>, et la fonction <code>math.sqrt()</code> pour calculer la distance euclidienne entre deux points \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<code>(x1,y1)(x1‚Äã,y1‚Äã)</code> et <code>(x2,y2)(x2‚Äã,y2‚Äã)</code>.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. <span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcrire un programme Python pour calculer la distance entre deux points. \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"$$\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\\\\\\\\\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"$$\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": null,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"1d34f939\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"1.4142135623730951\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"import math \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"x1 = float(input(\\\\\\\\\\\\\\\"Entrez x1\\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"x2 = float(input(\\\\\\\\\\\\\\\"Entrez x2\\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"y1 = float(input(\\\\\\\\\\\\\\\"Entrez y1\\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"y2 = float(input(\\\\\\\\\\\\\\\"Entrez y2\\\\\\\\\\\\\\\"))\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(distance)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"6685b3ac\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": []\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" ],\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"metadata\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"kernelspec\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"display_name\\\\\\\": \\\\\\\"Python 3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"language\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python3\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"language_info\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"codemirror_mode\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"name\\\\\\\": \\\\\\\"ipython\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"version\\\\\\\": 3\\\\n\\\",\\n\",\n",
      "      \"      \\\"   },\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"file_extension\\\\\\\": \\\\\\\".py\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"mimetype\\\\\\\": \\\\\\\"text/x-python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"nbconvert_exporter\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"pygments_lexer\\\\\\\": \\\\\\\"ipython3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"version\\\\\\\": \\\\\\\"3.13.7\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" },\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat\\\\\\\": 4,\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat_minor\\\\\\\": 5\\\\n\\\",\\n\",\n",
      "      \"      \\\"}\\\\n\\\",\\n\",\n",
      "      \"      \\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"--- Lecture de Listes.ipynb ---\\\\n\\\",\\n\",\n",
      "      \"      \\\"{\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"cells\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"b44d4791\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H1><span style=\\\\\\\\\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\\\\\\\\\">Les Listes</span></H1>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"</center>\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"b9c93591\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\\\\\\\\\">Les ressources: </span></H3> \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Python Lists and List Manipulation](https://realpython.com/python-lists-tuples/)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* [Documentation Officielle de Python - Structures de donn√©es - Listes](https://docs.python.org/fr/3/tutorial/datastructures.html#more-on-lists)\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"873352ef\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 1 : La liste des notes </span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center><code>notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]</code></center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcris un programme en Python qui extrait toutes les notes sup√©rieures √† la moyenne et les stocke dans une nouvelle liste.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 2,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"08a09dc2\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"[14, 18, 13, 15, 14, 16]\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"notesSup = []\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"somme=0\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"nbr = len(notes)-1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for i in notes:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    somme+=i\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"moyenne=somme/nbr\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for element in notes:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    if element > moyenne:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        notesSup.append(element)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(notesSup)\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"87452d02\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 2 : Les mots communs</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center><code>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Ch1 = \\\\\\\\\\\\\\\"Le langage Python est tr√®s populaire\\\\\\\\\\\\\\\" <br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Ch2 = \\\\\\\\\\\\\\\"Python est un langage puissant\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        </code></center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcris un programme en Python qui permet de regrouper dans une liste les mots communs entre deux cha√Ænes de caract√®res Ch1 et Ch2.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 5,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"a640e80e\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"['langage', 'Python', 'est']\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Ch1 = \\\\\\\\\\\\\\\"Le langage Python est tr√®s populaire\\\\\\\\\\\\\\\" \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Ch2 = \\\\\\\\\\\\\\\"Python est un langage puissant\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"ch3=[]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"list1= Ch1.split()\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"list2= Ch2.split()\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for element in list1 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    if element in Ch2 and element not in ch3 :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        ch3.append(element)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(str(ch3))\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"5d74627c\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 3 : Manipulation et tri de listes mixtes</span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center><code>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"stock = [\\\\\\\\\\\\\\\"Stylo\\\\\\\\\\\\\\\", 25, \\\\\\\\\\\\\\\"Classeur\\\\\\\\\\\\\\\", 100, \\\\\\\\\\\\\\\"Crayon\\\\\\\\\\\\\\\", 12, \\\\\\\\\\\\\\\"Surligneur\\\\\\\\\\\\\\\", 40, \\\\\\\\\\\\\\\"Feutre\\\\\\\\\\\\\\\", 5]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        </code></center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\" √âcris un programme Python qui effectue les op√©rations suivantes √† partir de la liste stock :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\" 1. Afficher la liste initiale.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"2. Cr√©er deux nouvelles listes :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* une contenant uniquement les cha√Ænes de caract√®res,\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* l‚Äôautre contenant uniquement les valeurs num√©riques.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"3. Trier :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* la liste des cha√Ænes en ordre croissant (alphab√©tique),\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"* la liste des nombres en ordre d√©croissant.\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"4. Afficher les deux listes tri√©es.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 2,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"67b9949c\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"name\\\\\\\": \\\\\\\"stdout\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"stream\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"text\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"['Ami', 'Classeur', 'Crayon', 'Feutre', 'Stylo', 'Surligneur']\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"[100, 40, 25, 12, 5]\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"     ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"stock = [\\\\\\\\\\\\\\\"Stylo\\\\\\\\\\\\\\\", 25, \\\\\\\\\\\\\\\"Classeur\\\\\\\\\\\\\\\", 100, \\\\\\\\\\\\\\\"Crayon\\\\\\\\\\\\\\\", 12, \\\\\\\\\\\\\\\"Surligneur\\\\\\\\\\\\\\\", 40, \\\\\\\\\\\\\\\"Feutre\\\\\\\\\\\\\\\", 5,\\\\\\\\\\\\\\\"Ami\\\\\\\\\\\\\\\"]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"chaine=[x for x in stock if isinstance(x,str)]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"num=[x for x in stock if isinstance(x,int)]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"nbr=len(num)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"nbrStr=len(chaine)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for i in range(nbr):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for j in range(i+1, nbr):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        if num[j]>num[i]:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            temp=num[j]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            num[j]=num[i]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            num[i]=temp\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"for i in range(nbrStr):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for j in range(i+1,nbrStr):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        if chaine[j]<chaine[i]:\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            temp=chaine[j]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            chaine[j]=chaine[i]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            chaine[i]=temp\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(chaine)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"print(num)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"fe0eccef\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 4 : Recherche d‚Äôun √©l√©ment dans une liste </span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center><code>Fruits = [\\\\\\\\\\\\\\\"pomme\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"banane\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"orange\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"kiwi\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"mangue\\\\\\\\\\\\\\\"]</code></center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Cr√©er une fonction ¬´ rechercheElement ¬ª qui a pour param√®tres un √©l√©ment et une liste et qui renvoie False si l‚Äô√©l√©ment n‚Äôest pas dans la liste, ou l‚Äôindice de l‚Äô√©l√©ment dans le cas contraire.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 34,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"b6d66015\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"data\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"text/plain\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\"False\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"      ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"     },\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"execution_count\\\\\\\": 34,\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"execute_result\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"Fruits = [\\\\\\\\\\\\\\\"pomme\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"banane\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"orange\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"kiwi\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"mangue\\\\\\\\\\\\\\\"]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def rechercheElement(mots):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for element in Fruits :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        if element == mots :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            return element\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        else :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            return False\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"rechercheElement(\\\\\\\\\\\\\\\"pp\\\\\\\\\\\\\\\")        \\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    \\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"ce9ba959\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<H3><span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\\\\\\\\\">Challenge 5 : Nombre d'occurrences </span></H3>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<center><code>L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]</code></center>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"<span style=\\\\\\\\\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\\\\\\\\\">Travail √† faire</span>:</br>\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"√âcrire un algorithme en python qui renvoie le nombre d'occurrences d'un √©l√©ment a dans une liste L donn√©e sans utiliser aucune fonction pr√©d√©finie en Python.\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"code\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"execution_count\\\\\\\": 38,\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"fb150eca\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"outputs\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    {\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"data\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"      \\\\\\\"text/plain\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"       \\\\\\\"3\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"      ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"     },\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"execution_count\\\\\\\": 38,\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"     \\\\\\\"output_type\\\\\\\": \\\\\\\"execute_result\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"    }\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ],\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": [\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"def occu(a):\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    b=0\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    for i in L :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"        if i == a :\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"            b+=1\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"    return b\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"occu(23)\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"   ]\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"cell_type\\\\\\\": \\\\\\\"markdown\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"id\\\\\\\": \\\\\\\"e8fb0d93\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"metadata\\\\\\\": {},\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"source\\\\\\\": []\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" ],\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"metadata\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"kernelspec\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"display_name\\\\\\\": \\\\\\\"Python 3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"language\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python3\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  },\\\\n\\\",\\n\",\n",
      "      \"      \\\"  \\\\\\\"language_info\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"codemirror_mode\\\\\\\": {\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"name\\\\\\\": \\\\\\\"ipython\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"    \\\\\\\"version\\\\\\\": 3\\\\n\\\",\\n\",\n",
      "      \"      \\\"   },\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"file_extension\\\\\\\": \\\\\\\".py\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"mimetype\\\\\\\": \\\\\\\"text/x-python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"name\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"nbconvert_exporter\\\\\\\": \\\\\\\"python\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"pygments_lexer\\\\\\\": \\\\\\\"ipython3\\\\\\\",\\\\n\\\",\\n\",\n",
      "      \"      \\\"   \\\\\\\"version\\\\\\\": \\\\\\\"3.13.7\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"  }\\\\n\\\",\\n\",\n",
      "      \"      \\\" },\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat\\\\\\\": 4,\\\\n\\\",\\n\",\n",
      "      \"      \\\" \\\\\\\"nbformat_minor\\\\\\\": 5\\\\n\\\",\\n\",\n",
      "      \"      \\\"}\\\\n\\\",\\n\",\n",
      "      \"      \\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"--- Lecture de README.md ---\\\\n\\\",\\n\",\n",
      "      \"      \\\"üß© Challenges en Python\\\\n\\\",\\n\",\n",
      "      \"      \\\"\\\\n\\\",\\n\",\n",
      "      \"      \\\"1. Bases du langage Python\\\\n\\\",\\n\",\n",
      "      \"      \\\"2. Fonctions et port√©e des variables\\\\n\\\",\\n\",\n",
      "      \"      \\\"3. Listes, dictionnaires et tuples\\\\n\\\",\\n\",\n",
      "      \"      \\\"4. Programmation orient√©e objet (classes)\\\\n\\\",\\n\",\n",
      "      \"      \\\"5. Manipulation de fichiers\\\\n\\\",\\n\",\n",
      "      \"      \\\"\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"import os \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"repertoire = r\\\\\\\"C:\\\\\\\\Users\\\\\\\\elabi\\\\\\\\OneDrive\\\\\\\\Desktop\\\\\\\\Challenge\\\\\\\\WarmUp\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"contenue = os.listdir(repertoire)\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(contenue)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"for fichier in contenue:\\\\n\\\",\\n\",\n",
      "      \"    \\\"    chemin_complet = os.path.join(repertoire, fichier)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    if os.path.isfile(chemin_complet):\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(f\\\\\\\"--- Lecture de {fichier} ---\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"        with open(chemin_complet, 'r', encoding='utf-8') as fichiers:\\\\n\\\",\\n\",\n",
      "      \"    \\\"            contenu = fichiers.read()\\\\n\\\",\\n\",\n",
      "      \"    \\\"            print(contenu)\\\\n\\\",\\n\",\n",
      "      \"    \\\"    else:\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(f\\\\\\\"--- Ignor√© (ce n'est pas un fichier) : {fichier} ---\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"5240bc4e\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 2 : Recherche de Fichiers</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"V√©rifier l'existence de fichiers sp√©cifiques et les traiter.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez os.path.exists() pour v√©rifier si des fichiers de configuration (config.yaml) existent dans un r√©pertoire donn√©.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Si le fichier existe, ouvrez-le et affichez son contenu.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"fa5797e7\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"#  √âcrivez du code Python ici\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"c9850348\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 4 : Cr√©ation de R√©pertoires</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Cr√©er une structure de r√©pertoires √† partir d'une liste de noms.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez os.mkdir() pour cr√©er un r√©pertoire principal.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Cr√©ez plusieurs sous-r√©pertoires √† l'int√©rieur du r√©pertoire principal en utilisant une liste de noms.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"07f28968\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"#  √âcrivez du code Python ici\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"70d5c0f1\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 5 : Copie S√©lective de Fichiers</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Copier des fichiers sp√©cifiques d'un r√©pertoire √† un autre.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez os.listdir() pour lister tous les fichiers dans un r√©pertoire source.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez shutil.copy() pour copier uniquement les fichiers avec une extension sp√©cifique (par exemple, .csv) vers un r√©pertoire de destination.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"d723fec4\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"#  √âcrivez du code Python ici\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"860b9d43\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 6 : √âcriture de Fichiers</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcrire du contenu dans un fichier texte.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Utilisez open() en mode √©criture pour cr√©er un nouveau fichier texte.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* √âcrivez des lignes de texte dans le fichier en utilisant une boucle.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Fermez le fichier et v√©rifiez que les donn√©es ont √©t√© correctement enregistr√©es.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"bacbe689\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"#  √âcrivez du code Python ici\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"27cd8680\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": []\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" ],\\n\",\n",
      "      \" \\\"metadata\\\": {\\n\",\n",
      "      \"  \\\"kernelspec\\\": {\\n\",\n",
      "      \"   \\\"display_name\\\": \\\"Python 3\\\",\\n\",\n",
      "      \"   \\\"language\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python3\\\"\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  \\\"language_info\\\": {\\n\",\n",
      "      \"   \\\"codemirror_mode\\\": {\\n\",\n",
      "      \"    \\\"name\\\": \\\"ipython\\\",\\n\",\n",
      "      \"    \\\"version\\\": 3\\n\",\n",
      "      \"   },\\n\",\n",
      "      \"   \\\"file_extension\\\": \\\".py\\\",\\n\",\n",
      "      \"   \\\"mimetype\\\": \\\"text/x-python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"nbconvert_exporter\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"pygments_lexer\\\": \\\"ipython3\\\",\\n\",\n",
      "      \"   \\\"version\\\": \\\"3.13.7\\\"\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" },\\n\",\n",
      "      \" \\\"nbformat\\\": 4,\\n\",\n",
      "      \" \\\"nbformat_minor\\\": 5\\n\",\n",
      "      \"}\\n\",\n",
      "      \"\\n\",\n",
      "      \"--- Lecture de Fonctions.ipynb ---\\n\",\n",
      "      \"{\\n\",\n",
      "      \" \\\"cells\\\": [\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"21dfa672\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H1><span style=\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\">Les Fonctions</span></H1>\\\\n\\\",\\n\",\n",
      "      \"    \\\"</center>\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"4280dbf3\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\">Les ressources: </span></H3> \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Python Functions](https://realpython.com/defining-your-own-python-function/#abstraction)\\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/controlflow.html#defining-functions)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"e83d584f\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 1 : Pr√©sentation personnalis√©</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"R√©utiliser un programme existant (Challenge 2) en le structurant dans une fonction nomm√©e horaire_sup.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"R√©√©cris le programme du Challenge 2 dans une fonction appel√©e horaire_sup.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 2,\\n\",\n",
      "      \"   \\\"id\\\": \\\"b3439d44\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"Votre salaire est :  4300.0\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"def horaire_sup(nbrHr,shr):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    if nbrHr > 40 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        hrA = nbrHr - 40\\\\n\\\",\\n\",\n",
      "      \"    \\\"        remun = hrA * shr * 1.5\\\\n\\\",\\n\",\n",
      "      \"    \\\"        salaireReg = (shr * 40) + remun\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(\\\\\\\"Votre salaire est : \\\\\\\" ,salaireReg)\\\\n\\\",\\n\",\n",
      "      \"    \\\"    else :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        salaireReg = shr * nbrHr\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(\\\\\\\"Votre salaire est : \\\\\\\" ,salaireReg)\\\\n\\\",\\n\",\n",
      "      \"    \\\"horaire_sup(42,100)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"77631c7d\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 2 : Fonction calculation() ‚Äì somme et diff√©rence</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Apprendre √† √©crire une fonction avec plusieurs param√®tres et plusieurs valeurs de retour.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcris une fonction calculation() qui prend deux arguments et calcule leur somme ainsi que leur diff√©rence. La fonction doit ensuite retourner les deux r√©sultats dans une seule instruction return.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 3,\\n\",\n",
      "      \"   \\\"id\\\": \\\"323a8b4a\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"data\\\": {\\n\",\n",
      "      \"      \\\"text/plain\\\": [\\n\",\n",
      "      \"       \\\"(9, 1)\\\"\\n\",\n",
      "      \"      ]\\n\",\n",
      "      \"     },\\n\",\n",
      "      \"     \\\"execution_count\\\": 3,\\n\",\n",
      "      \"     \\\"metadata\\\": {},\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"execute_result\\\"\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"def calculation(a,b):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    somme = a+b\\\\n\\\",\\n\",\n",
      "      \"    \\\"    different = a-b\\\\n\\\",\\n\",\n",
      "      \"    \\\"    return somme,different\\\\n\\\",\\n\",\n",
      "      \"    \\\"calculation(5,4)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"c2081304\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 3 : Mini-projets algorithmiques regroup√©s</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"D√©velopper plusieurs petites fonctions ind√©pendantes, chacune ciblant une comp√©tence pr√©cise\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"- Demander √† l‚Äôutilisateur de saisir un nombre entier n et afficher la factorielle de ce nombre (n!).\\\\n\\\",\\n\",\n",
      "      \"    \\\"- Demander √† l‚Äôutilisateur un nombre entier m et afficher sa table de multiplication de 1 √† 10.\\\\n\\\",\\n\",\n",
      "      \"    \\\"- Demander √† l‚Äôutilisateur un nombre entier L et indiquer s‚Äôil s‚Äôagit d‚Äôun carr√© parfait.\\\\n\\\",\\n\",\n",
      "      \"    \\\"- Demander une cha√Æne de caract√®res √† l‚Äôutilisateur, puis afficher chaque caract√®re un par un.\\\\n\\\",\\n\",\n",
      "      \"    \\\"- Demander une phrase √† l‚Äôutilisateur et afficher le mot le plus long de cette phrase.\\\\n\\\",\\n\",\n",
      "      \"    \\\"- Demander une cha√Æne de caract√®res Ch et afficher le nombre d‚Äôoccurrences de chaque caract√®re. Exemple : Pour Ch = ‚Äúartificial intelligence developer‚Äù \\\\n\\\",\\n\",\n",
      "      \"    \\\"- Le programme doit afficher : Le caract√®re \\\\\\\"i\\\\\\\" figure 5 fois dans la cha√Æne Ch.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 3,\\n\",\n",
      "      \"   \\\"id\\\": \\\"a06adf5c\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"1*2 = 2\\\\n\\\",\\n\",\n",
      "      \"      \\\"2*2 = 4\\\\n\\\",\\n\",\n",
      "      \"      \\\"3*2 = 6\\\\n\\\",\\n\",\n",
      "      \"      \\\"4*2 = 8\\\\n\\\",\\n\",\n",
      "      \"      \\\"5*2 = 10\\\\n\\\",\\n\",\n",
      "      \"      \\\"6*2 = 12\\\\n\\\",\\n\",\n",
      "      \"      \\\"7*2 = 14\\\\n\\\",\\n\",\n",
      "      \"      \\\"8*2 = 16\\\\n\\\",\\n\",\n",
      "      \"      \\\"9*2 = 18\\\\n\\\",\\n\",\n",
      "      \"      \\\"10*2 = 20\\\\n\\\",\\n\",\n",
      "      \"      \\\"m\\\\n\\\",\\n\",\n",
      "      \"      \\\"a\\\\n\\\",\\n\",\n",
      "      \"      \\\"l\\\\n\\\",\\n\",\n",
      "      \"      \\\"i\\\\n\\\",\\n\",\n",
      "      \"      \\\"k\\\\n\\\",\\n\",\n",
      "      \"      \\\"a\\\\n\\\",\\n\",\n",
      "      \"      \\\"Le mot le plus long est : intelligence avec une longueur de 12\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    },\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"data\\\": {\\n\",\n",
      "      \"      \\\"text/plain\\\": [\\n\",\n",
      "      \"       \\\"{'a': 2,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'r': 2,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 't': 2,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'i': 5,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'f': 1,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'c': 2,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'l': 4,\\\\n\\\",\\n\",\n",
      "      \"       \\\" ' ': 2,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'n': 2,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'e': 6,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'g': 1,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'd': 1,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'v': 1,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'o': 1,\\\\n\\\",\\n\",\n",
      "      \"       \\\" 'p': 1}\\\"\\n\",\n",
      "      \"      ]\\n\",\n",
      "      \"     },\\n\",\n",
      "      \"     \\\"execution_count\\\": 3,\\n\",\n",
      "      \"     \\\"metadata\\\": {},\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"execute_result\\\"\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"import math ;\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # Factorielle\\\\n\\\",\\n\",\n",
      "      \"    \\\"def factorielle(n):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    i=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"    fact=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"    while i <= n:\\\\n\\\",\\n\",\n",
      "      \"    \\\"        fact*=i\\\\n\\\",\\n\",\n",
      "      \"    \\\"        i+=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"    return fact   \\\\n\\\",\\n\",\n",
      "      \"    \\\"factorielle(3) \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # Multiplication \\\\n\\\",\\n\",\n",
      "      \"    \\\"def multip(m):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    i=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"    while i <= 10:\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(f\\\\\\\"{i}*{m} = {i*m}\\\\\\\") \\\\n\\\",\\n\",\n",
      "      \"    \\\"        i+=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"    \\\\n\\\",\\n\",\n",
      "      \"    \\\"multip(2)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # Carr√© parfait\\\\n\\\",\\n\",\n",
      "      \"    \\\"def carre(L):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    c=math.sqrt(L)\\\\n\\\",\\n\",\n",
      "      \"    \\\"    cInt=int(c)\\\\n\\\",\\n\",\n",
      "      \"    \\\"    if c-cInt == 0 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        return \\\\\\\"carre parfait\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    else :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        return \\\\\\\"carre non parfait\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"carre(5)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # chaine caractere un par un\\\\n\\\",\\n\",\n",
      "      \"    \\\"def chaine(ch):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    for charctere in ch:\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(charctere)\\\\n\\\",\\n\",\n",
      "      \"    \\\"chaine(\\\\\\\"malika\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # le mot le plus long\\\\n\\\",\\n\",\n",
      "      \"    \\\"def long(chaine):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    L = chaine.split()\\\\n\\\",\\n\",\n",
      "      \"    \\\"    max = L[0]\\\\n\\\",\\n\",\n",
      "      \"    \\\"    \\\\n\\\",\\n\",\n",
      "      \"    \\\"    for element in L:\\\\n\\\",\\n\",\n",
      "      \"    \\\"        if len(element) > len(max):\\\\n\\\",\\n\",\n",
      "      \"    \\\"            max = element\\\\n\\\",\\n\",\n",
      "      \"    \\\"    \\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(\\\\\\\"Le mot le plus long est :\\\\\\\", max, \\\\\\\"avec une longueur de\\\\\\\", len(max))\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"long(\\\\\\\"artificial intelligence developer\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    # Occurence de chaque caractere dans une chaine de caractere\\\\n\\\",\\n\",\n",
      "      \"    \\\"def occu(chaine):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    occurence={}\\\\n\\\",\\n\",\n",
      "      \"    \\\"    for char in chaine :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        if char in occurence:\\\\n\\\",\\n\",\n",
      "      \"    \\\"            occurence[char]+=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"        else :\\\\n\\\",\\n\",\n",
      "      \"    \\\"            occurence[char]=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"    return occurence\\\\n\\\",\\n\",\n",
      "      \"    \\\"occu(\\\\\\\"artificial intelligence developer\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    \\\\n\\\",\\n\",\n",
      "      \"    \\\"    \\\\n\\\",\\n\",\n",
      "      \"    \\\"  \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" ],\\n\",\n",
      "      \" \\\"metadata\\\": {\\n\",\n",
      "      \"  \\\"kernelspec\\\": {\\n\",\n",
      "      \"   \\\"display_name\\\": \\\"Python 3\\\",\\n\",\n",
      "      \"   \\\"language\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python3\\\"\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  \\\"language_info\\\": {\\n\",\n",
      "      \"   \\\"codemirror_mode\\\": {\\n\",\n",
      "      \"    \\\"name\\\": \\\"ipython\\\",\\n\",\n",
      "      \"    \\\"version\\\": 3\\n\",\n",
      "      \"   },\\n\",\n",
      "      \"   \\\"file_extension\\\": \\\".py\\\",\\n\",\n",
      "      \"   \\\"mimetype\\\": \\\"text/x-python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"nbconvert_exporter\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"pygments_lexer\\\": \\\"ipython3\\\",\\n\",\n",
      "      \"   \\\"version\\\": \\\"3.13.7\\\"\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" },\\n\",\n",
      "      \" \\\"nbformat\\\": 4,\\n\",\n",
      "      \" \\\"nbformat_minor\\\": 5\\n\",\n",
      "      \"}\\n\",\n",
      "      \"\\n\",\n",
      "      \"--- Lecture de Les_Bases.ipynb ---\\n\",\n",
      "      \"{\\n\",\n",
      "      \" \\\"cells\\\": [\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"6b58fb7c\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H1><span style=\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\">Les Bases De Python</span></H1>\\\\n\\\",\\n\",\n",
      "      \"    \\\"</center>\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"b2e95ccf\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<code>*Dans ces labs, vous d√©couvrirez et ma√Ætriserez les fondamentaux du langage Python, notamment la syntaxe de base, les types de donn√©es, les structures de contr√¥le (conditions, boucles), les fonctions et la gestion des modules. Vous apprendrez √©galement √† manipuler des collections (listes, dictionnaires, ensembles), √† lire et √©crire des fichiers, et √† utiliser les environnements virtuels. Ces comp√©tences vous permettront de d√©velopper vos premiers scripts et d‚Äôacqu√©rir une base solide pour aborder des projets plus avanc√©s en intelligence artificielle et en science des donn√©es.*</code>\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"8333f40b\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\">Les ressources: </span></H3> \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"- **Conditions** : \\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Python if/else Statements (Real Python)](https://realpython.com/python-conditional-statements/)  \\\\n\\\",\\n\",\n",
      "      \"    \\\"*  [Documentation officielle ‚Äì if](https://docs.python.org/fr/3/tutorial/controlflow.html#if-statements-and-expressions)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"- **Boucles** : \\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Python Loops (Real Python)](https://realpython.com/python-for-loop/)  \\\\n\\\",\\n\",\n",
      "      \"    \\\"*  [Documentation officielle ‚Äì for](https://docs.python.org/fr/3/tutorial/controlflow.html#for-statements)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"- **Try/Except** : \\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Python Exceptions (Real Python)](https://realpython.com/python-exceptions/)  \\\\n\\\",\\n\",\n",
      "      \"    \\\"*  [Documentation officielle ‚Äì exceptions](https://docs.python.org/fr/3/tutorial/errors.html#handling-exceptions)\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"ab1d155d\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 1 : Pr√©sentation personnalis√©e</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Apprendre √† utiliser la fonction input() pour interagir avec l‚Äôutilisateur et afficher une sortie personnalis√©e avec print().\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcris un programme qui demande √† l‚Äôutilisateur son pr√©nom et son √¢ge, puis affiche un message personnalis√© indiquant son pr√©nom et son √¢ge.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"751431f3\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"nom = input(\\\\\\\"Entrez votre nom : \\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"age = int(input(\\\\\\\"Entrez votre age\\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(\\\\\\\"Votre nom est : \\\\\\\" , nom , \\\\\\\"Et votre age est : \\\\\\\" , age)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"e313a8c6\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge  2 : Calcul de salaire avec heures suppl√©mentaires</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Travailler la saisie de donn√©es utilisateur, les conversions de types, les conditions (if), et les op√©rations arithm√©tiques pour simuler un cas r√©el de calcul de paie. \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"* √âcris un programme qui r√©cup√®re les informations suivantes depuis l‚Äôentr√©e utilisateur : son nom, son salaire horaire et le nombre d‚Äôheures qu‚Äôil a travaill√©es.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Si le nombre d‚Äôheures travaill√©es d√©passe 40 heures, les heures au-del√† de 40 seront consid√©r√©es comme des heures suppl√©mentaires et r√©mun√©r√©es √† 1,5 fois le salaire horaire normal.\\\\n\\\",\\n\",\n",
      "      \"    \\\"* Le programme doit alors calculer le salaire total (salaire r√©gulier + √©ventuelles heures suppl√©mentaires).\\\\n\\\",\\n\",\n",
      "      \"    \\\"Enfin, affiche le nom de l‚Äôutilisateur ainsi que son salaire total calcul√©.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"93ec144e\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"nom = input(\\\\\\\"Entrez votre nom : \\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"shr= float(input(\\\\\\\"Entrez votre salaire horaire : \\\\\\\" ))\\\\n\\\",\\n\",\n",
      "      \"    \\\"nbrHr = int(input(\\\\\\\"Entrez les heures de travail : \\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"if nbrHr > 40 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    hrA = nbrHr - 40\\\\n\\\",\\n\",\n",
      "      \"    \\\"    remun = hrA * shr * 1.5\\\\n\\\",\\n\",\n",
      "      \"    \\\"    salaireReg = (shr * 40) + remun\\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(\\\\\\\"Votre salaire est : \\\\\\\" ,salaireReg)\\\\n\\\",\\n\",\n",
      "      \"    \\\"else :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    salaireReg = shr * nbrHr\\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(\\\\\\\"Votre salaire est : \\\\\\\" ,salaireReg)\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"9e2e052e\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 3 :  Gestion des erreurs utilisateur</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Introduire les blocs try / except afin de rendre le programme plus robuste face aux erreurs de saisie (par exemple, texte au lieu de nombres).\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"R√©√©cris ton programme de calcul de salaire en utilisant try et except afin que le programme g√®re proprement les entr√©es non num√©riques en affichant un message d‚Äôerreur puis en quittant le programme.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"a83ebcec\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"nom = input(\\\\\\\"Entrez votre nom : \\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"try :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    shr= float(input(\\\\\\\"Entrez votre salaire horaire : \\\\\\\" ))\\\\n\\\",\\n\",\n",
      "      \"    \\\"    nbrHr = int(input(\\\\\\\"Entrez les heures de travail : \\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"    if nbrHr > 40 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        hrA = nbrHr - 40\\\\n\\\",\\n\",\n",
      "      \"    \\\"        remun = hrA * shr * 1.5\\\\n\\\",\\n\",\n",
      "      \"    \\\"        salaireReg = (shr * 40) + remun\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(\\\\\\\"Votre salaire est : \\\\\\\" ,salaireReg)\\\\n\\\",\\n\",\n",
      "      \"    \\\"    else :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        salaireReg = shr * nbrHr\\\\n\\\",\\n\",\n",
      "      \"    \\\"        print(\\\\\\\"Votre salaire est : \\\\\\\" ,salaireReg)\\\\n\\\",\\n\",\n",
      "      \"    \\\"except :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(\\\\\\\"Oops!  That was no valid number.  Try again...\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"7b34c3c1\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 4 : D√©terminer le signe d‚Äôun produit de deux nombres</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\" Amener l‚Äôapprenant √† manipuler les entr√©es utilisateur, les conditions (if/elif/else) et la logique math√©matique pour d√©terminer le signe du produit de deux nombres.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcrire un programme en Python qui demande √† l'utilisateur deux nombres n1 et n2 et lui indique ensuite si le produit de ces deux nombres est positif ou n√©gatif. On pr√©voit dans le programme le cas o√π le produit peut √™tre nul.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 1,\\n\",\n",
      "      \"   \\\"id\\\": \\\"91115272\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"Le produit de ces deux nombres est n√©gatif\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"n1 = int(input(\\\\\\\"Entrez le premier nombre : \\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"n2 = int(input(\\\\\\\"Entrez le deuxieme nombre\\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"produit = n1*n2\\\\n\\\",\\n\",\n",
      "      \"    \\\"if produit < 0 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(\\\\\\\"Le produit de ces deux nombres est n√©gatif\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"else :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    print(\\\\\\\"Le produit de ces deux nombres est positif\\\\\\\")\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"e765cc2b\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 5 : Somme d‚Äôentiers</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Apprendre √† utiliser la boucle while pour r√©p√©ter une op√©ration jusqu‚Äô√† une condition donn√©e.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Ecrivez un programme en Python qui calcule la somme de 1 √† N, o√π N est saisi par l'utilisateur. En utilisant la boucle \\\\\\\"while\\\\\\\".\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 7,\\n\",\n",
      "      \"   \\\"id\\\": \\\"0de1f6c4\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"La somme de 0 √† 5 est 15\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"n = int(input(\\\\\\\"Entrer un nombre\\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"i = 1\\\\n\\\",\\n\",\n",
      "      \"    \\\"sum=0\\\\n\\\",\\n\",\n",
      "      \"    \\\"while i<=n :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    sum+=i\\\\n\\\",\\n\",\n",
      "      \"    \\\"    i+=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(f\\\\\\\"La somme de 0 √† {n} est {sum}\\\\\\\")\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"7082952c\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 6 : Inverser une cha√Æne</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Comprendre la manipulation de cha√Ænes de caract√®res et l‚Äôusage de la boucle while pour parcourir une cha√Æne en sens inverse.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\" * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\\\\n\\\",\\n\",\n",
      "      \"    \\\" * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\\\\n\\\",\\n\",\n",
      "      \"    \\\" * Exemple: Cha√Æne originale: DevAI ==>\\\\n\\\",\\n\",\n",
      "      \"    \\\"   Cha√Æne invers√©e: IAveD\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 1,\\n\",\n",
      "      \"   \\\"id\\\": \\\"814c2390\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"akilam\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"chaine = input(\\\\\\\"Entrez une chaine de caractere\\\\\\\")\\\\n\\\",\\n\",\n",
      "      \"    \\\"chaineinverse=\\\\\\\"\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"i=len(chaine)-1\\\\n\\\",\\n\",\n",
      "      \"    \\\"while i>=0 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    chaineinverse+=chaine[i]\\\\n\\\",\\n\",\n",
      "      \"    \\\"    i=i-1\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(chaineinverse)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"0c27da2e\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 7 : Calcul de distance entre deux points</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"1. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Objectif</span> : </br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Apprendre √† manipuler les nombres flottants et √† appliquer une formule math√©matique en Python. Cet exercice permet d‚Äôutiliser l‚Äôentr√©e utilisateur <code>(input())</code>, la conversion de types <code>(float())</code>, et la fonction <code>math.sqrt()</code> pour calculer la distance euclidienne entre deux points \\\\n\\\",\\n\",\n",
      "      \"    \\\"<code>(x1,y1)(x1‚Äã,y1‚Äã)</code> et <code>(x2,y2)(x2‚Äã,y2‚Äã)</code>.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. <span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcrire un programme Python pour calculer la distance entre deux points. \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"$$\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\\\\\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\\\\n\\\",\\n\",\n",
      "      \"    \\\"$$\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": null,\\n\",\n",
      "      \"   \\\"id\\\": \\\"1d34f939\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"1.4142135623730951\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"import math \\\\n\\\",\\n\",\n",
      "      \"    \\\"x1 = float(input(\\\\\\\"Entrez x1\\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"x2 = float(input(\\\\\\\"Entrez x2\\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"y1 = float(input(\\\\\\\"Entrez y1\\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"y2 = float(input(\\\\\\\"Entrez y2\\\\\\\"))\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(distance)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"6685b3ac\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": []\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" ],\\n\",\n",
      "      \" \\\"metadata\\\": {\\n\",\n",
      "      \"  \\\"kernelspec\\\": {\\n\",\n",
      "      \"   \\\"display_name\\\": \\\"Python 3\\\",\\n\",\n",
      "      \"   \\\"language\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python3\\\"\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  \\\"language_info\\\": {\\n\",\n",
      "      \"   \\\"codemirror_mode\\\": {\\n\",\n",
      "      \"    \\\"name\\\": \\\"ipython\\\",\\n\",\n",
      "      \"    \\\"version\\\": 3\\n\",\n",
      "      \"   },\\n\",\n",
      "      \"   \\\"file_extension\\\": \\\".py\\\",\\n\",\n",
      "      \"   \\\"mimetype\\\": \\\"text/x-python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"nbconvert_exporter\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"pygments_lexer\\\": \\\"ipython3\\\",\\n\",\n",
      "      \"   \\\"version\\\": \\\"3.13.7\\\"\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" },\\n\",\n",
      "      \" \\\"nbformat\\\": 4,\\n\",\n",
      "      \" \\\"nbformat_minor\\\": 5\\n\",\n",
      "      \"}\\n\",\n",
      "      \"\\n\",\n",
      "      \"--- Lecture de Listes.ipynb ---\\n\",\n",
      "      \"{\\n\",\n",
      "      \" \\\"cells\\\": [\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"b44d4791\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H1><span style=\\\\\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\\\\\">Les Listes</span></H1>\\\\n\\\",\\n\",\n",
      "      \"    \\\"</center>\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"b9c93591\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold ; color: #19b7f1ff\\\\\\\">Les ressources: </span></H3> \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Python Lists and List Manipulation](https://realpython.com/python-lists-tuples/)\\\\n\\\",\\n\",\n",
      "      \"    \\\"* [Documentation Officielle de Python - Structures de donn√©es - Listes](https://docs.python.org/fr/3/tutorial/datastructures.html#more-on-lists)\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"873352ef\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 1 : La liste des notes </span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<center><code>notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]</code></center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcris un programme en Python qui extrait toutes les notes sup√©rieures √† la moyenne et les stocke dans une nouvelle liste.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 2,\\n\",\n",
      "      \"   \\\"id\\\": \\\"08a09dc2\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"[14, 18, 13, 15, 14, 16]\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]\\\\n\\\",\\n\",\n",
      "      \"    \\\"notesSup = []\\\\n\\\",\\n\",\n",
      "      \"    \\\"somme=0\\\\n\\\",\\n\",\n",
      "      \"    \\\"nbr = len(notes)-1\\\\n\\\",\\n\",\n",
      "      \"    \\\"for i in notes:\\\\n\\\",\\n\",\n",
      "      \"    \\\"    somme+=i\\\\n\\\",\\n\",\n",
      "      \"    \\\"moyenne=somme/nbr\\\\n\\\",\\n\",\n",
      "      \"    \\\"for element in notes:\\\\n\\\",\\n\",\n",
      "      \"    \\\"    if element > moyenne:\\\\n\\\",\\n\",\n",
      "      \"    \\\"        notesSup.append(element)\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(notesSup)\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"87452d02\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 2 : Les mots communs</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<center><code>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Ch1 = \\\\\\\"Le langage Python est tr√®s populaire\\\\\\\" <br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Ch2 = \\\\\\\"Python est un langage puissant\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"        </code></center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcris un programme en Python qui permet de regrouper dans une liste les mots communs entre deux cha√Ænes de caract√®res Ch1 et Ch2.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 5,\\n\",\n",
      "      \"   \\\"id\\\": \\\"a640e80e\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"['langage', 'Python', 'est']\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"Ch1 = \\\\\\\"Le langage Python est tr√®s populaire\\\\\\\" \\\\n\\\",\\n\",\n",
      "      \"    \\\"Ch2 = \\\\\\\"Python est un langage puissant\\\\\\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"ch3=[]\\\\n\\\",\\n\",\n",
      "      \"    \\\"list1= Ch1.split()\\\\n\\\",\\n\",\n",
      "      \"    \\\"list2= Ch2.split()\\\\n\\\",\\n\",\n",
      "      \"    \\\"for element in list1 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"    if element in Ch2 and element not in ch3 :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        ch3.append(element)\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(str(ch3))\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"5d74627c\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 3 : Manipulation et tri de listes mixtes</span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<center><code>\\\\n\\\",\\n\",\n",
      "      \"    \\\"stock = [\\\\\\\"Stylo\\\\\\\", 25, \\\\\\\"Classeur\\\\\\\", 100, \\\\\\\"Crayon\\\\\\\", 12, \\\\\\\"Surligneur\\\\\\\", 40, \\\\\\\"Feutre\\\\\\\", 5]\\\\n\\\",\\n\",\n",
      "      \"    \\\"        </code></center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\" √âcris un programme Python qui effectue les op√©rations suivantes √† partir de la liste stock :\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\" 1. Afficher la liste initiale.\\\\n\\\",\\n\",\n",
      "      \"    \\\"2. Cr√©er deux nouvelles listes :\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* une contenant uniquement les cha√Ænes de caract√®res,\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* l‚Äôautre contenant uniquement les valeurs num√©riques.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"3. Trier :\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* la liste des cha√Ænes en ordre croissant (alphab√©tique),\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"* la liste des nombres en ordre d√©croissant.\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"4. Afficher les deux listes tri√©es.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 2,\\n\",\n",
      "      \"   \\\"id\\\": \\\"67b9949c\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"name\\\": \\\"stdout\\\",\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
      "      \"     \\\"text\\\": [\\n\",\n",
      "      \"      \\\"['Ami', 'Classeur', 'Crayon', 'Feutre', 'Stylo', 'Surligneur']\\\\n\\\",\\n\",\n",
      "      \"      \\\"[100, 40, 25, 12, 5]\\\\n\\\"\\n\",\n",
      "      \"     ]\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"stock = [\\\\\\\"Stylo\\\\\\\", 25, \\\\\\\"Classeur\\\\\\\", 100, \\\\\\\"Crayon\\\\\\\", 12, \\\\\\\"Surligneur\\\\\\\", 40, \\\\\\\"Feutre\\\\\\\", 5,\\\\\\\"Ami\\\\\\\"]\\\\n\\\",\\n\",\n",
      "      \"    \\\"chaine=[x for x in stock if isinstance(x,str)]\\\\n\\\",\\n\",\n",
      "      \"    \\\"num=[x for x in stock if isinstance(x,int)]\\\\n\\\",\\n\",\n",
      "      \"    \\\"nbr=len(num)\\\\n\\\",\\n\",\n",
      "      \"    \\\"nbrStr=len(chaine)\\\\n\\\",\\n\",\n",
      "      \"    \\\"for i in range(nbr):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    for j in range(i+1, nbr):\\\\n\\\",\\n\",\n",
      "      \"    \\\"        if num[j]>num[i]:\\\\n\\\",\\n\",\n",
      "      \"    \\\"            temp=num[j]\\\\n\\\",\\n\",\n",
      "      \"    \\\"            num[j]=num[i]\\\\n\\\",\\n\",\n",
      "      \"    \\\"            num[i]=temp\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"for i in range(nbrStr):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    for j in range(i+1,nbrStr):\\\\n\\\",\\n\",\n",
      "      \"    \\\"        if chaine[j]<chaine[i]:\\\\n\\\",\\n\",\n",
      "      \"    \\\"            temp=chaine[j]\\\\n\\\",\\n\",\n",
      "      \"    \\\"            chaine[j]=chaine[i]\\\\n\\\",\\n\",\n",
      "      \"    \\\"            chaine[i]=temp\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(chaine)\\\\n\\\",\\n\",\n",
      "      \"    \\\"print(num)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"fe0eccef\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 4 : Recherche d‚Äôun √©l√©ment dans une liste </span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<center><code>Fruits = [\\\\\\\"pomme\\\\\\\", \\\\\\\"banane\\\\\\\", \\\\\\\"orange\\\\\\\", \\\\\\\"kiwi\\\\\\\", \\\\\\\"mangue\\\\\\\"]</code></center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"Cr√©er une fonction ¬´ rechercheElement ¬ª qui a pour param√®tres un √©l√©ment et une liste et qui renvoie False si l‚Äô√©l√©ment n‚Äôest pas dans la liste, ou l‚Äôindice de l‚Äô√©l√©ment dans le cas contraire.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 34,\\n\",\n",
      "      \"   \\\"id\\\": \\\"b6d66015\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"data\\\": {\\n\",\n",
      "      \"      \\\"text/plain\\\": [\\n\",\n",
      "      \"       \\\"False\\\"\\n\",\n",
      "      \"      ]\\n\",\n",
      "      \"     },\\n\",\n",
      "      \"     \\\"execution_count\\\": 34,\\n\",\n",
      "      \"     \\\"metadata\\\": {},\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"execute_result\\\"\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"Fruits = [\\\\\\\"pomme\\\\\\\", \\\\\\\"banane\\\\\\\", \\\\\\\"orange\\\\\\\", \\\\\\\"kiwi\\\\\\\", \\\\\\\"mangue\\\\\\\"]\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"def rechercheElement(mots):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    for element in Fruits :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        if element == mots :\\\\n\\\",\\n\",\n",
      "      \"    \\\"            return element\\\\n\\\",\\n\",\n",
      "      \"    \\\"        else :\\\\n\\\",\\n\",\n",
      "      \"    \\\"            return False\\\\n\\\",\\n\",\n",
      "      \"    \\\"rechercheElement(\\\\\\\"pp\\\\\\\")        \\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"    \\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"ce9ba959\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"<H3><span style=\\\\\\\"font-weight: bold; color: #1a8bcdff;\\\\\\\">Challenge 5 : Nombre d'occurrences </span></H3>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<center><code>L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]</code></center>\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"<span style=\\\\\\\"font-weight: bold; color: #e56922ff;\\\\\\\">Travail √† faire</span>:</br>\\\\n\\\",\\n\",\n",
      "      \"    \\\"√âcrire un algorithme en python qui renvoie le nombre d'occurrences d'un √©l√©ment a dans une liste L donn√©e sans utiliser aucune fonction pr√©d√©finie en Python.\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
      "      \"   \\\"execution_count\\\": 38,\\n\",\n",
      "      \"   \\\"id\\\": \\\"fb150eca\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"outputs\\\": [\\n\",\n",
      "      \"    {\\n\",\n",
      "      \"     \\\"data\\\": {\\n\",\n",
      "      \"      \\\"text/plain\\\": [\\n\",\n",
      "      \"       \\\"3\\\"\\n\",\n",
      "      \"      ]\\n\",\n",
      "      \"     },\\n\",\n",
      "      \"     \\\"execution_count\\\": 38,\\n\",\n",
      "      \"     \\\"metadata\\\": {},\\n\",\n",
      "      \"     \\\"output_type\\\": \\\"execute_result\\\"\\n\",\n",
      "      \"    }\\n\",\n",
      "      \"   ],\\n\",\n",
      "      \"   \\\"source\\\": [\\n\",\n",
      "      \"    \\\"L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]\\\\n\\\",\\n\",\n",
      "      \"    \\\"def occu(a):\\\\n\\\",\\n\",\n",
      "      \"    \\\"    b=0\\\\n\\\",\\n\",\n",
      "      \"    \\\"    for i in L :\\\\n\\\",\\n\",\n",
      "      \"    \\\"        if i == a :\\\\n\\\",\\n\",\n",
      "      \"    \\\"            b+=1\\\\n\\\",\\n\",\n",
      "      \"    \\\"    return b\\\\n\\\",\\n\",\n",
      "      \"    \\\"occu(23)\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\",\\n\",\n",
      "      \"    \\\"\\\\n\\\"\\n\",\n",
      "      \"   ]\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  {\\n\",\n",
      "      \"   \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
      "      \"   \\\"id\\\": \\\"e8fb0d93\\\",\\n\",\n",
      "      \"   \\\"metadata\\\": {},\\n\",\n",
      "      \"   \\\"source\\\": []\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" ],\\n\",\n",
      "      \" \\\"metadata\\\": {\\n\",\n",
      "      \"  \\\"kernelspec\\\": {\\n\",\n",
      "      \"   \\\"display_name\\\": \\\"Python 3\\\",\\n\",\n",
      "      \"   \\\"language\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python3\\\"\\n\",\n",
      "      \"  },\\n\",\n",
      "      \"  \\\"language_info\\\": {\\n\",\n",
      "      \"   \\\"codemirror_mode\\\": {\\n\",\n",
      "      \"    \\\"name\\\": \\\"ipython\\\",\\n\",\n",
      "      \"    \\\"version\\\": 3\\n\",\n",
      "      \"   },\\n\",\n",
      "      \"   \\\"file_extension\\\": \\\".py\\\",\\n\",\n",
      "      \"   \\\"mimetype\\\": \\\"text/x-python\\\",\\n\",\n",
      "      \"   \\\"name\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"nbconvert_exporter\\\": \\\"python\\\",\\n\",\n",
      "      \"   \\\"pygments_lexer\\\": \\\"ipython3\\\",\\n\",\n",
      "      \"   \\\"version\\\": \\\"3.13.7\\\"\\n\",\n",
      "      \"  }\\n\",\n",
      "      \" },\\n\",\n",
      "      \" \\\"nbformat\\\": 4,\\n\",\n",
      "      \" \\\"nbformat_minor\\\": 5\\n\",\n",
      "      \"}\\n\",\n",
      "      \"\\n\",\n",
      "      \"--- Lecture de README.md ---\\n\",\n",
      "      \"üß© Challenges en Python\\n\",\n",
      "      \"\\n\",\n",
      "      \"1. Bases du langage Python\\n\",\n",
      "      \"2. Fonctions et port√©e des variables\\n\",\n",
      "      \"3. Listes, dictionnaires et tuples\\n\",\n",
      "      \"4. Programmation orient√©e objet (classes)\\n\",\n",
      "      \"5. Manipulation de fichiers\\n\",\n",
      "      \"\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"\\n\",\n",
      "    \"import os \\n\",\n",
      "    \"\\n\",\n",
      "    \"repertoire = r\\\"C:\\\\Users\\\\elabi\\\\OneDrive\\\\Desktop\\\\Challenge\\\\WarmUp\\\"\\n\",\n",
      "    \"contenue = os.listdir(repertoire)\\n\",\n",
      "    \"print(contenue)\\n\",\n",
      "    \"\\n\",\n",
      "    \"for fichier in contenue:\\n\",\n",
      "    \"    chemin_complet = os.path.join(repertoire, fichier)\\n\",\n",
      "    \"    nouveauChemin=os.path.join(repertoire,\\\"fichier.text\\\")\\n\",\n",
      "    \"\\n\",\n",
      "    \"    if os.path.isfile(chemin_complet):\\n\",\n",
      "    \"        print(f\\\"--- Lecture de {fichier} ---\\\")\\n\",\n",
      "    \"        with open(chemin_complet, 'r', encoding='utf-8') as fichiers:\\n\",\n",
      "    \"            contenu = fichiers.read()\\n\",\n",
      "    \"            print(contenu)\\n\",\n",
      "    \"        with open(nouveauChemin,'w',encoding='utf-8') as newPath:\\n\",\n",
      "    \"            new=newPath.write()\\n\",\n",
      "    \"    else:\\n\",\n",
      "    \"        print(f\\\"--- Ignor√© (ce n'est pas un fichier) : {fichier} ---\\\")\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"5240bc4e\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 2 : Recherche de Fichiers</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"V√©rifier l'existence de fichiers sp√©cifiques et les traiter.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez os.path.exists() pour v√©rifier si des fichiers de configuration (config.yaml) existent dans un r√©pertoire donn√©.\\n\",\n",
      "    \"* Si le fichier existe, ouvrez-le et affichez son contenu.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"fa5797e7\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"#  √âcrivez du code Python ici\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"c9850348\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 4 : Cr√©ation de R√©pertoires</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Cr√©er une structure de r√©pertoires √† partir d'une liste de noms.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez os.mkdir() pour cr√©er un r√©pertoire principal.\\n\",\n",
      "    \"* Cr√©ez plusieurs sous-r√©pertoires √† l'int√©rieur du r√©pertoire principal en utilisant une liste de noms.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"07f28968\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"#  √âcrivez du code Python ici\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"70d5c0f1\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 5 : Copie S√©lective de Fichiers</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Copier des fichiers sp√©cifiques d'un r√©pertoire √† un autre.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez os.listdir() pour lister tous les fichiers dans un r√©pertoire source.\\n\",\n",
      "    \"* Utilisez shutil.copy() pour copier uniquement les fichiers avec une extension sp√©cifique (par exemple, .csv) vers un r√©pertoire de destination.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"d723fec4\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"#  √âcrivez du code Python ici\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"860b9d43\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 6 : √âcriture de Fichiers</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"√âcrire du contenu dans un fichier texte.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* Utilisez open() en mode √©criture pour cr√©er un nouveau fichier texte.\\n\",\n",
      "    \"* √âcrivez des lignes de texte dans le fichier en utilisant une boucle.\\n\",\n",
      "    \"* Fermez le fichier et v√©rifiez que les donn√©es ont √©t√© correctement enregistr√©es.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"bacbe689\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"#  √âcrivez du code Python ici\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"27cd8680\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": []\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.13.7\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 5\n",
      "}\n",
      "\n",
      "--- Lecture de Fonctions.ipynb ---\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"21dfa672\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<center>\\n\",\n",
      "    \"<H1><span style=\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\">Les Fonctions</span></H1>\\n\",\n",
      "    \"</center>\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"4280dbf3\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold ; color: #19b7f1ff\\\">Les ressources: </span></H3> \\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"* [Python Functions](https://realpython.com/defining-your-own-python-function/#abstraction)\\n\",\n",
      "    \"* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/controlflow.html#defining-functions)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"e83d584f\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 1 : Pr√©sentation personnalis√©</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"R√©utiliser un programme existant (Challenge 2) en le structurant dans une fonction nomm√©e horaire_sup.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"R√©√©cris le programme du Challenge 2 dans une fonction appel√©e horaire_sup.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 2,\n",
      "   \"id\": \"b3439d44\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"Votre salaire est :  4300.0\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"def horaire_sup(nbrHr,shr):\\n\",\n",
      "    \"    if nbrHr > 40 :\\n\",\n",
      "    \"        hrA = nbrHr - 40\\n\",\n",
      "    \"        remun = hrA * shr * 1.5\\n\",\n",
      "    \"        salaireReg = (shr * 40) + remun\\n\",\n",
      "    \"        print(\\\"Votre salaire est : \\\" ,salaireReg)\\n\",\n",
      "    \"    else :\\n\",\n",
      "    \"        salaireReg = shr * nbrHr\\n\",\n",
      "    \"        print(\\\"Votre salaire est : \\\" ,salaireReg)\\n\",\n",
      "    \"horaire_sup(42,100)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"77631c7d\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 2 : Fonction calculation() ‚Äì somme et diff√©rence</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Apprendre √† √©crire une fonction avec plusieurs param√®tres et plusieurs valeurs de retour.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"√âcris une fonction calculation() qui prend deux arguments et calcule leur somme ainsi que leur diff√©rence. La fonction doit ensuite retourner les deux r√©sultats dans une seule instruction return.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 3,\n",
      "   \"id\": \"323a8b4a\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"data\": {\n",
      "      \"text/plain\": [\n",
      "       \"(9, 1)\"\n",
      "      ]\n",
      "     },\n",
      "     \"execution_count\": 3,\n",
      "     \"metadata\": {},\n",
      "     \"output_type\": \"execute_result\"\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"def calculation(a,b):\\n\",\n",
      "    \"    somme = a+b\\n\",\n",
      "    \"    different = a-b\\n\",\n",
      "    \"    return somme,different\\n\",\n",
      "    \"calculation(5,4)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"c2081304\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 3 : Mini-projets algorithmiques regroup√©s</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"D√©velopper plusieurs petites fonctions ind√©pendantes, chacune ciblant une comp√©tence pr√©cise\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"- Demander √† l‚Äôutilisateur de saisir un nombre entier n et afficher la factorielle de ce nombre (n!).\\n\",\n",
      "    \"- Demander √† l‚Äôutilisateur un nombre entier m et afficher sa table de multiplication de 1 √† 10.\\n\",\n",
      "    \"- Demander √† l‚Äôutilisateur un nombre entier L et indiquer s‚Äôil s‚Äôagit d‚Äôun carr√© parfait.\\n\",\n",
      "    \"- Demander une cha√Æne de caract√®res √† l‚Äôutilisateur, puis afficher chaque caract√®re un par un.\\n\",\n",
      "    \"- Demander une phrase √† l‚Äôutilisateur et afficher le mot le plus long de cette phrase.\\n\",\n",
      "    \"- Demander une cha√Æne de caract√®res Ch et afficher le nombre d‚Äôoccurrences de chaque caract√®re. Exemple : Pour Ch = ‚Äúartificial intelligence developer‚Äù \\n\",\n",
      "    \"- Le programme doit afficher : Le caract√®re \\\"i\\\" figure 5 fois dans la cha√Æne Ch.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 3,\n",
      "   \"id\": \"a06adf5c\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"1*2 = 2\\n\",\n",
      "      \"2*2 = 4\\n\",\n",
      "      \"3*2 = 6\\n\",\n",
      "      \"4*2 = 8\\n\",\n",
      "      \"5*2 = 10\\n\",\n",
      "      \"6*2 = 12\\n\",\n",
      "      \"7*2 = 14\\n\",\n",
      "      \"8*2 = 16\\n\",\n",
      "      \"9*2 = 18\\n\",\n",
      "      \"10*2 = 20\\n\",\n",
      "      \"m\\n\",\n",
      "      \"a\\n\",\n",
      "      \"l\\n\",\n",
      "      \"i\\n\",\n",
      "      \"k\\n\",\n",
      "      \"a\\n\",\n",
      "      \"Le mot le plus long est : intelligence avec une longueur de 12\\n\"\n",
      "     ]\n",
      "    },\n",
      "    {\n",
      "     \"data\": {\n",
      "      \"text/plain\": [\n",
      "       \"{'a': 2,\\n\",\n",
      "       \" 'r': 2,\\n\",\n",
      "       \" 't': 2,\\n\",\n",
      "       \" 'i': 5,\\n\",\n",
      "       \" 'f': 1,\\n\",\n",
      "       \" 'c': 2,\\n\",\n",
      "       \" 'l': 4,\\n\",\n",
      "       \" ' ': 2,\\n\",\n",
      "       \" 'n': 2,\\n\",\n",
      "       \" 'e': 6,\\n\",\n",
      "       \" 'g': 1,\\n\",\n",
      "       \" 'd': 1,\\n\",\n",
      "       \" 'v': 1,\\n\",\n",
      "       \" 'o': 1,\\n\",\n",
      "       \" 'p': 1}\"\n",
      "      ]\n",
      "     },\n",
      "     \"execution_count\": 3,\n",
      "     \"metadata\": {},\n",
      "     \"output_type\": \"execute_result\"\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"import math ;\\n\",\n",
      "    \"    # Factorielle\\n\",\n",
      "    \"def factorielle(n):\\n\",\n",
      "    \"    i=1\\n\",\n",
      "    \"    fact=1\\n\",\n",
      "    \"    while i <= n:\\n\",\n",
      "    \"        fact*=i\\n\",\n",
      "    \"        i+=1\\n\",\n",
      "    \"    return fact   \\n\",\n",
      "    \"factorielle(3) \\n\",\n",
      "    \"\\n\",\n",
      "    \"    # Multiplication \\n\",\n",
      "    \"def multip(m):\\n\",\n",
      "    \"    i=1\\n\",\n",
      "    \"    while i <= 10:\\n\",\n",
      "    \"        print(f\\\"{i}*{m} = {i*m}\\\") \\n\",\n",
      "    \"        i+=1\\n\",\n",
      "    \"    \\n\",\n",
      "    \"multip(2)\\n\",\n",
      "    \"\\n\",\n",
      "    \"    # Carr√© parfait\\n\",\n",
      "    \"def carre(L):\\n\",\n",
      "    \"    c=math.sqrt(L)\\n\",\n",
      "    \"    cInt=int(c)\\n\",\n",
      "    \"    if c-cInt == 0 :\\n\",\n",
      "    \"        return \\\"carre parfait\\\"\\n\",\n",
      "    \"    else :\\n\",\n",
      "    \"        return \\\"carre non parfait\\\"\\n\",\n",
      "    \"carre(5)\\n\",\n",
      "    \"\\n\",\n",
      "    \"    # chaine caractere un par un\\n\",\n",
      "    \"def chaine(ch):\\n\",\n",
      "    \"    for charctere in ch:\\n\",\n",
      "    \"        print(charctere)\\n\",\n",
      "    \"chaine(\\\"malika\\\")\\n\",\n",
      "    \"\\n\",\n",
      "    \"    # le mot le plus long\\n\",\n",
      "    \"def long(chaine):\\n\",\n",
      "    \"    L = chaine.split()\\n\",\n",
      "    \"    max = L[0]\\n\",\n",
      "    \"    \\n\",\n",
      "    \"    for element in L:\\n\",\n",
      "    \"        if len(element) > len(max):\\n\",\n",
      "    \"            max = element\\n\",\n",
      "    \"    \\n\",\n",
      "    \"    print(\\\"Le mot le plus long est :\\\", max, \\\"avec une longueur de\\\", len(max))\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"long(\\\"artificial intelligence developer\\\")\\n\",\n",
      "    \"\\n\",\n",
      "    \"    # Occurence de chaque caractere dans une chaine de caractere\\n\",\n",
      "    \"def occu(chaine):\\n\",\n",
      "    \"    occurence={}\\n\",\n",
      "    \"    for char in chaine :\\n\",\n",
      "    \"        if char in occurence:\\n\",\n",
      "    \"            occurence[char]+=1\\n\",\n",
      "    \"        else :\\n\",\n",
      "    \"            occurence[char]=1\\n\",\n",
      "    \"    return occurence\\n\",\n",
      "    \"occu(\\\"artificial intelligence developer\\\")\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"    \\n\",\n",
      "    \"    \\n\",\n",
      "    \"  \\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"    \\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.13.7\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 5\n",
      "}\n",
      "\n",
      "--- Lecture de Les_Bases.ipynb ---\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"6b58fb7c\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<center>\\n\",\n",
      "    \"<H1><span style=\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\">Les Bases De Python</span></H1>\\n\",\n",
      "    \"</center>\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"b2e95ccf\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<code>*Dans ces labs, vous d√©couvrirez et ma√Ætriserez les fondamentaux du langage Python, notamment la syntaxe de base, les types de donn√©es, les structures de contr√¥le (conditions, boucles), les fonctions et la gestion des modules. Vous apprendrez √©galement √† manipuler des collections (listes, dictionnaires, ensembles), √† lire et √©crire des fichiers, et √† utiliser les environnements virtuels. Ces comp√©tences vous permettront de d√©velopper vos premiers scripts et d‚Äôacqu√©rir une base solide pour aborder des projets plus avanc√©s en intelligence artificielle et en science des donn√©es.*</code>\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"8333f40b\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold ; color: #19b7f1ff\\\">Les ressources: </span></H3> \\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"- **Conditions** : \\n\",\n",
      "    \"* [Python if/else Statements (Real Python)](https://realpython.com/python-conditional-statements/)  \\n\",\n",
      "    \"*  [Documentation officielle ‚Äì if](https://docs.python.org/fr/3/tutorial/controlflow.html#if-statements-and-expressions)\\n\",\n",
      "    \"\\n\",\n",
      "    \"- **Boucles** : \\n\",\n",
      "    \"* [Python Loops (Real Python)](https://realpython.com/python-for-loop/)  \\n\",\n",
      "    \"*  [Documentation officielle ‚Äì for](https://docs.python.org/fr/3/tutorial/controlflow.html#for-statements)\\n\",\n",
      "    \"\\n\",\n",
      "    \"- **Try/Except** : \\n\",\n",
      "    \"* [Python Exceptions (Real Python)](https://realpython.com/python-exceptions/)  \\n\",\n",
      "    \"*  [Documentation officielle ‚Äì exceptions](https://docs.python.org/fr/3/tutorial/errors.html#handling-exceptions)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"ab1d155d\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 1 : Pr√©sentation personnalis√©e</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Apprendre √† utiliser la fonction input() pour interagir avec l‚Äôutilisateur et afficher une sortie personnalis√©e avec print().\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"√âcris un programme qui demande √† l‚Äôutilisateur son pr√©nom et son √¢ge, puis affiche un message personnalis√© indiquant son pr√©nom et son √¢ge.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"751431f3\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"nom = input(\\\"Entrez votre nom : \\\")\\n\",\n",
      "    \"age = int(input(\\\"Entrez votre age\\\"))\\n\",\n",
      "    \"\\n\",\n",
      "    \"print(\\\"Votre nom est : \\\" , nom , \\\"Et votre age est : \\\" , age)\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"e313a8c6\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge  2 : Calcul de salaire avec heures suppl√©mentaires</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Travailler la saisie de donn√©es utilisateur, les conversions de types, les conditions (if), et les op√©rations arithm√©tiques pour simuler un cas r√©el de calcul de paie. \\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"* √âcris un programme qui r√©cup√®re les informations suivantes depuis l‚Äôentr√©e utilisateur : son nom, son salaire horaire et le nombre d‚Äôheures qu‚Äôil a travaill√©es.\\n\",\n",
      "    \"* Si le nombre d‚Äôheures travaill√©es d√©passe 40 heures, les heures au-del√† de 40 seront consid√©r√©es comme des heures suppl√©mentaires et r√©mun√©r√©es √† 1,5 fois le salaire horaire normal.\\n\",\n",
      "    \"* Le programme doit alors calculer le salaire total (salaire r√©gulier + √©ventuelles heures suppl√©mentaires).\\n\",\n",
      "    \"Enfin, affiche le nom de l‚Äôutilisateur ainsi que son salaire total calcul√©.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"93ec144e\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"nom = input(\\\"Entrez votre nom : \\\")\\n\",\n",
      "    \"shr= float(input(\\\"Entrez votre salaire horaire : \\\" ))\\n\",\n",
      "    \"nbrHr = int(input(\\\"Entrez les heures de travail : \\\"))\\n\",\n",
      "    \"\\n\",\n",
      "    \"if nbrHr > 40 :\\n\",\n",
      "    \"    hrA = nbrHr - 40\\n\",\n",
      "    \"    remun = hrA * shr * 1.5\\n\",\n",
      "    \"    salaireReg = (shr * 40) + remun\\n\",\n",
      "    \"    print(\\\"Votre salaire est : \\\" ,salaireReg)\\n\",\n",
      "    \"else :\\n\",\n",
      "    \"    salaireReg = shr * nbrHr\\n\",\n",
      "    \"    print(\\\"Votre salaire est : \\\" ,salaireReg)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"9e2e052e\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 3 :  Gestion des erreurs utilisateur</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Introduire les blocs try / except afin de rendre le programme plus robuste face aux erreurs de saisie (par exemple, texte au lieu de nombres).\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"R√©√©cris ton programme de calcul de salaire en utilisant try et except afin que le programme g√®re proprement les entr√©es non num√©riques en affichant un message d‚Äôerreur puis en quittant le programme.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"a83ebcec\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [],\n",
      "   \"source\": [\n",
      "    \"nom = input(\\\"Entrez votre nom : \\\")\\n\",\n",
      "    \"try :\\n\",\n",
      "    \"    shr= float(input(\\\"Entrez votre salaire horaire : \\\" ))\\n\",\n",
      "    \"    nbrHr = int(input(\\\"Entrez les heures de travail : \\\"))\\n\",\n",
      "    \"    if nbrHr > 40 :\\n\",\n",
      "    \"        hrA = nbrHr - 40\\n\",\n",
      "    \"        remun = hrA * shr * 1.5\\n\",\n",
      "    \"        salaireReg = (shr * 40) + remun\\n\",\n",
      "    \"        print(\\\"Votre salaire est : \\\" ,salaireReg)\\n\",\n",
      "    \"    else :\\n\",\n",
      "    \"        salaireReg = shr * nbrHr\\n\",\n",
      "    \"        print(\\\"Votre salaire est : \\\" ,salaireReg)\\n\",\n",
      "    \"except :\\n\",\n",
      "    \"    print(\\\"Oops!  That was no valid number.  Try again...\\\")\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"7b34c3c1\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 4 : D√©terminer le signe d‚Äôun produit de deux nombres</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \" Amener l‚Äôapprenant √† manipuler les entr√©es utilisateur, les conditions (if/elif/else) et la logique math√©matique pour d√©terminer le signe du produit de deux nombres.\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"√âcrire un programme en Python qui demande √† l'utilisateur deux nombres n1 et n2 et lui indique ensuite si le produit de ces deux nombres est positif ou n√©gatif. On pr√©voit dans le programme le cas o√π le produit peut √™tre nul.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 1,\n",
      "   \"id\": \"91115272\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"Le produit de ces deux nombres est n√©gatif\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"n1 = int(input(\\\"Entrez le premier nombre : \\\"))\\n\",\n",
      "    \"n2 = int(input(\\\"Entrez le deuxieme nombre\\\"))\\n\",\n",
      "    \"produit = n1*n2\\n\",\n",
      "    \"if produit < 0 :\\n\",\n",
      "    \"    print(\\\"Le produit de ces deux nombres est n√©gatif\\\")\\n\",\n",
      "    \"else :\\n\",\n",
      "    \"    print(\\\"Le produit de ces deux nombres est positif\\\")\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"e765cc2b\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 5 : Somme d‚Äôentiers</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Apprendre √† utiliser la boucle while pour r√©p√©ter une op√©ration jusqu‚Äô√† une condition donn√©e.\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"Ecrivez un programme en Python qui calcule la somme de 1 √† N, o√π N est saisi par l'utilisateur. En utilisant la boucle \\\"while\\\".\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 7,\n",
      "   \"id\": \"0de1f6c4\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"La somme de 0 √† 5 est 15\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"n = int(input(\\\"Entrer un nombre\\\"))\\n\",\n",
      "    \"i = 1\\n\",\n",
      "    \"sum=0\\n\",\n",
      "    \"while i<=n :\\n\",\n",
      "    \"    sum+=i\\n\",\n",
      "    \"    i+=1\\n\",\n",
      "    \"print(f\\\"La somme de 0 √† {n} est {sum}\\\")\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"7082952c\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 6 : Inverser une cha√Æne</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Comprendre la manipulation de cha√Ænes de caract√®res et l‚Äôusage de la boucle while pour parcourir une cha√Æne en sens inverse.\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \" * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\\n\",\n",
      "    \" * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\\n\",\n",
      "    \" * Exemple: Cha√Æne originale: DevAI ==>\\n\",\n",
      "    \"   Cha√Æne invers√©e: IAveD\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 1,\n",
      "   \"id\": \"814c2390\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"akilam\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"chaine = input(\\\"Entrez une chaine de caractere\\\")\\n\",\n",
      "    \"chaineinverse=\\\"\\\"\\n\",\n",
      "    \"i=len(chaine)-1\\n\",\n",
      "    \"while i>=0 :\\n\",\n",
      "    \"    chaineinverse+=chaine[i]\\n\",\n",
      "    \"    i=i-1\\n\",\n",
      "    \"print(chaineinverse)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"0c27da2e\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 7 : Calcul de distance entre deux points</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"1. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Objectif</span> : </br>\\n\",\n",
      "    \"Apprendre √† manipuler les nombres flottants et √† appliquer une formule math√©matique en Python. Cet exercice permet d‚Äôutiliser l‚Äôentr√©e utilisateur <code>(input())</code>, la conversion de types <code>(float())</code>, et la fonction <code>math.sqrt()</code> pour calculer la distance euclidienne entre deux points \\n\",\n",
      "    \"<code>(x1,y1)(x1‚Äã,y1‚Äã)</code> et <code>(x2,y2)(x2‚Äã,y2‚Äã)</code>.\\n\",\n",
      "    \"\\n\",\n",
      "    \"2. <span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"√âcrire un programme Python pour calculer la distance entre deux points. \\n\",\n",
      "    \"\\n\",\n",
      "    \"$$\\n\",\n",
      "    \"\\\\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\\n\",\n",
      "    \"$$\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": null,\n",
      "   \"id\": \"1d34f939\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"1.4142135623730951\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"import math \\n\",\n",
      "    \"x1 = float(input(\\\"Entrez x1\\\"))\\n\",\n",
      "    \"x2 = float(input(\\\"Entrez x2\\\"))\\n\",\n",
      "    \"y1 = float(input(\\\"Entrez y1\\\"))\\n\",\n",
      "    \"y2 = float(input(\\\"Entrez y2\\\"))\\n\",\n",
      "    \"\\n\",\n",
      "    \"distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\\n\",\n",
      "    \"print(distance)\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"6685b3ac\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": []\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.13.7\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 5\n",
      "}\n",
      "\n",
      "--- Lecture de Listes.ipynb ---\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"b44d4791\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<center>\\n\",\n",
      "    \"<H1><span style=\\\"text-align: center; font-weight: bold; color: #746bb3ff;\\\">Les Listes</span></H1>\\n\",\n",
      "    \"</center>\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"b9c93591\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold ; color: #19b7f1ff\\\">Les ressources: </span></H3> \\n\",\n",
      "    \"\\n\",\n",
      "    \"* [Python Lists and List Manipulation](https://realpython.com/python-lists-tuples/)\\n\",\n",
      "    \"* [Documentation Officielle de Python - Structures de donn√©es - Listes](https://docs.python.org/fr/3/tutorial/datastructures.html#more-on-lists)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"873352ef\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 1 : La liste des notes </span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<center><code>notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]</code></center>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"√âcris un programme en Python qui extrait toutes les notes sup√©rieures √† la moyenne et les stocke dans une nouvelle liste.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 2,\n",
      "   \"id\": \"08a09dc2\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"[14, 18, 13, 15, 14, 16]\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]\\n\",\n",
      "    \"notesSup = []\\n\",\n",
      "    \"somme=0\\n\",\n",
      "    \"nbr = len(notes)-1\\n\",\n",
      "    \"for i in notes:\\n\",\n",
      "    \"    somme+=i\\n\",\n",
      "    \"moyenne=somme/nbr\\n\",\n",
      "    \"for element in notes:\\n\",\n",
      "    \"    if element > moyenne:\\n\",\n",
      "    \"        notesSup.append(element)\\n\",\n",
      "    \"print(notesSup)\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"87452d02\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"\\n\",\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 2 : Les mots communs</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<center><code>\\n\",\n",
      "    \"Ch1 = \\\"Le langage Python est tr√®s populaire\\\" <br>\\n\",\n",
      "    \"Ch2 = \\\"Python est un langage puissant\\\"\\n\",\n",
      "    \"        </code></center>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"√âcris un programme en Python qui permet de regrouper dans une liste les mots communs entre deux cha√Ænes de caract√®res Ch1 et Ch2.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 5,\n",
      "   \"id\": \"a640e80e\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"['langage', 'Python', 'est']\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"Ch1 = \\\"Le langage Python est tr√®s populaire\\\" \\n\",\n",
      "    \"Ch2 = \\\"Python est un langage puissant\\\"\\n\",\n",
      "    \"ch3=[]\\n\",\n",
      "    \"list1= Ch1.split()\\n\",\n",
      "    \"list2= Ch2.split()\\n\",\n",
      "    \"for element in list1 :\\n\",\n",
      "    \"    if element in Ch2 and element not in ch3 :\\n\",\n",
      "    \"        ch3.append(element)\\n\",\n",
      "    \"print(str(ch3))\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"5d74627c\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"\\n\",\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 3 : Manipulation et tri de listes mixtes</span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<center><code>\\n\",\n",
      "    \"stock = [\\\"Stylo\\\", 25, \\\"Classeur\\\", 100, \\\"Crayon\\\", 12, \\\"Surligneur\\\", 40, \\\"Feutre\\\", 5]\\n\",\n",
      "    \"        </code></center>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \" √âcris un programme Python qui effectue les op√©rations suivantes √† partir de la liste stock :\\n\",\n",
      "    \"\\n\",\n",
      "    \" 1. Afficher la liste initiale.\\n\",\n",
      "    \"2. Cr√©er deux nouvelles listes :\\n\",\n",
      "    \"\\n\",\n",
      "    \"* une contenant uniquement les cha√Ænes de caract√®res,\\n\",\n",
      "    \"\\n\",\n",
      "    \"* l‚Äôautre contenant uniquement les valeurs num√©riques.\\n\",\n",
      "    \"\\n\",\n",
      "    \"3. Trier :\\n\",\n",
      "    \"\\n\",\n",
      "    \"* la liste des cha√Ænes en ordre croissant (alphab√©tique),\\n\",\n",
      "    \"\\n\",\n",
      "    \"* la liste des nombres en ordre d√©croissant.\\n\",\n",
      "    \"\\n\",\n",
      "    \"4. Afficher les deux listes tri√©es.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 2,\n",
      "   \"id\": \"67b9949c\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"['Ami', 'Classeur', 'Crayon', 'Feutre', 'Stylo', 'Surligneur']\\n\",\n",
      "      \"[100, 40, 25, 12, 5]\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"stock = [\\\"Stylo\\\", 25, \\\"Classeur\\\", 100, \\\"Crayon\\\", 12, \\\"Surligneur\\\", 40, \\\"Feutre\\\", 5,\\\"Ami\\\"]\\n\",\n",
      "    \"chaine=[x for x in stock if isinstance(x,str)]\\n\",\n",
      "    \"num=[x for x in stock if isinstance(x,int)]\\n\",\n",
      "    \"nbr=len(num)\\n\",\n",
      "    \"nbrStr=len(chaine)\\n\",\n",
      "    \"for i in range(nbr):\\n\",\n",
      "    \"    for j in range(i+1, nbr):\\n\",\n",
      "    \"        if num[j]>num[i]:\\n\",\n",
      "    \"            temp=num[j]\\n\",\n",
      "    \"            num[j]=num[i]\\n\",\n",
      "    \"            num[i]=temp\\n\",\n",
      "    \"\\n\",\n",
      "    \"for i in range(nbrStr):\\n\",\n",
      "    \"    for j in range(i+1,nbrStr):\\n\",\n",
      "    \"        if chaine[j]<chaine[i]:\\n\",\n",
      "    \"            temp=chaine[j]\\n\",\n",
      "    \"            chaine[j]=chaine[i]\\n\",\n",
      "    \"            chaine[i]=temp\\n\",\n",
      "    \"print(chaine)\\n\",\n",
      "    \"print(num)\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"fe0eccef\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"\\n\",\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 4 : Recherche d‚Äôun √©l√©ment dans une liste </span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<center><code>Fruits = [\\\"pomme\\\", \\\"banane\\\", \\\"orange\\\", \\\"kiwi\\\", \\\"mangue\\\"]</code></center>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"Cr√©er une fonction ¬´ rechercheElement ¬ª qui a pour param√®tres un √©l√©ment et une liste et qui renvoie False si l‚Äô√©l√©ment n‚Äôest pas dans la liste, ou l‚Äôindice de l‚Äô√©l√©ment dans le cas contraire.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 34,\n",
      "   \"id\": \"b6d66015\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"data\": {\n",
      "      \"text/plain\": [\n",
      "       \"False\"\n",
      "      ]\n",
      "     },\n",
      "     \"execution_count\": 34,\n",
      "     \"metadata\": {},\n",
      "     \"output_type\": \"execute_result\"\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"Fruits = [\\\"pomme\\\", \\\"banane\\\", \\\"orange\\\", \\\"kiwi\\\", \\\"mangue\\\"]\\n\",\n",
      "    \"\\n\",\n",
      "    \"def rechercheElement(mots):\\n\",\n",
      "    \"    for element in Fruits :\\n\",\n",
      "    \"        if element == mots :\\n\",\n",
      "    \"            return element\\n\",\n",
      "    \"        else :\\n\",\n",
      "    \"            return False\\n\",\n",
      "    \"rechercheElement(\\\"pp\\\")        \\n\",\n",
      "    \"\\n\",\n",
      "    \"    \\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"ce9ba959\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"<H3><span style=\\\"font-weight: bold; color: #1a8bcdff;\\\">Challenge 5 : Nombre d'occurrences </span></H3>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<center><code>L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]</code></center>\\n\",\n",
      "    \"\\n\",\n",
      "    \"<span style=\\\"font-weight: bold; color: #e56922ff;\\\">Travail √† faire</span>:</br>\\n\",\n",
      "    \"√âcrire un algorithme en python qui renvoie le nombre d'occurrences d'un √©l√©ment a dans une liste L donn√©e sans utiliser aucune fonction pr√©d√©finie en Python.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 38,\n",
      "   \"id\": \"fb150eca\",\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"data\": {\n",
      "      \"text/plain\": [\n",
      "       \"3\"\n",
      "      ]\n",
      "     },\n",
      "     \"execution_count\": 38,\n",
      "     \"metadata\": {},\n",
      "     \"output_type\": \"execute_result\"\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]\\n\",\n",
      "    \"def occu(a):\\n\",\n",
      "    \"    b=0\\n\",\n",
      "    \"    for i in L :\\n\",\n",
      "    \"        if i == a :\\n\",\n",
      "    \"            b+=1\\n\",\n",
      "    \"    return b\\n\",\n",
      "    \"occu(23)\\n\",\n",
      "    \"\\n\",\n",
      "    \"\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"id\": \"e8fb0d93\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": []\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.13.7\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 5\n",
      "}\n",
      "\n",
      "--- Lecture de README.md ---\n",
      "üß© Challenges en Python\n",
      "\n",
      "1. Bases du langage Python\n",
      "2. Fonctions et port√©e des variables\n",
      "3. Listes, dictionnaires et tuples\n",
      "4. Programmation orient√©e objet (classes)\n",
      "5. Manipulation de fichiers\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import os \n",
    "\n",
    "repertoire = r\"C:\\Users\\elabi\\OneDrive\\Desktop\\Challenge\\WarmUp\"\n",
    "contenue = os.listdir(repertoire)\n",
    "print(contenue)\n",
    "\n",
    "for fichier in contenue:\n",
    "    chemin_complet = os.path.join(repertoire, fichier)\n",
    "    nouveauChemin=os.path.join(repertoire,\"fichier.text\")\n",
    "\n",
    "    if os.path.isfile(chemin_complet):\n",
    "        print(f\"--- Lecture de {fichier} ---\")\n",
    "        with open(chemin_complet, 'r', encoding='utf-8') as fichiers:\n",
    "            contenu = fichiers.read()\n",
    "            print(contenu)\n",
    "        with open(nouveauChemin,'w',encoding='utf-8') as newPath:\n",
    "            newPath.write(contenu)\n",
    "    else:\n",
    "        print(f\"--- Ignor√© (ce n'est pas un fichier) : {fichier} ---\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5240bc4e",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 2 : Recherche de Fichiers</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "V√©rifier l'existence de fichiers sp√©cifiques et les traiter.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez os.path.exists() pour v√©rifier si des fichiers de configuration (config.yaml) existent dans un r√©pertoire donn√©.\n",
    "* Si le fichier existe, ouvrez-le et affichez son contenu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa5797e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  √âcrivez du code Python ici\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9850348",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 4 : Cr√©ation de R√©pertoires</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Cr√©er une structure de r√©pertoires √† partir d'une liste de noms.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez os.mkdir() pour cr√©er un r√©pertoire principal.\n",
    "* Cr√©ez plusieurs sous-r√©pertoires √† l'int√©rieur du r√©pertoire principal en utilisant une liste de noms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07f28968",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  √âcrivez du code Python ici\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70d5c0f1",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 5 : Copie S√©lective de Fichiers</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Copier des fichiers sp√©cifiques d'un r√©pertoire √† un autre.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez os.listdir() pour lister tous les fichiers dans un r√©pertoire source.\n",
    "* Utilisez shutil.copy() pour copier uniquement les fichiers avec une extension sp√©cifique (par exemple, .csv) vers un r√©pertoire de destination."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d723fec4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  √âcrivez du code Python ici\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "860b9d43",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 6 : √âcriture de Fichiers</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "√âcrire du contenu dans un fichier texte.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* Utilisez open() en mode √©criture pour cr√©er un nouveau fichier texte.\n",
    "* √âcrivez des lignes de texte dans le fichier en utilisant une boucle.\n",
    "* Fermez le fichier et v√©rifiez que les donn√©es ont √©t√© correctement enregistr√©es."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bacbe689",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  √âcrivez du code Python ici\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27cd8680",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "21dfa672",
   "metadata": {},
   "source": [
    "<center>\n",
    "<H1><span style=\"text-align: center; font-weight: bold; color: #746bb3ff;\">Les Fonctions</span></H1>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4280dbf3",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold ; color: #19b7f1ff\">Les ressources: </span></H3> \n",
    "\n",
    "\n",
    "* [Python Functions](https://realpython.com/defining-your-own-python-function/#abstraction)\n",
    "* [Documentation Officielle de Python](https://docs.python.org/fr/3/tutorial/controlflow.html#defining-functions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e83d584f",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 1 : Pr√©sentation personnalis√©</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "R√©utiliser un programme existant (Challenge 2) en le structurant dans une fonction nomm√©e horaire_sup.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "R√©√©cris le programme du Challenge 2 dans une fonction appel√©e horaire_sup."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3439d44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Votre salaire est :  4300.0\n"
     ]
    }
   ],
   "source": [
    "def horaire_sup(nbrHr,shr):\n",
    "    if nbrHr > 40 :\n",
    "        hrA = nbrHr - 40\n",
    "        remun = hrA * shr * 1.5\n",
    "        salaireReg = (shr * 40) + remun\n",
    "        print(\"Votre salaire est : \" ,salaireReg)\n",
    "    else :\n",
    "        salaireReg = shr * nbrHr\n",
    "        print(\"Votre salaire est : \" ,salaireReg)\n",
    "horaire_sup(42,100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77631c7d",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 2 : Fonction calculation() ‚Äì somme et diff√©rence</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Apprendre √† √©crire une fonction avec plusieurs param√®tres et plusieurs valeurs de retour.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "√âcris une fonction calculation() qui prend deux arguments et calcule leur somme ainsi que leur diff√©rence. La fonction doit ensuite retourner les deux r√©sultats dans une seule instruction return."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "323a8b4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9, 1)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def calculation(a,b):\n",
    "    somme = a+b\n",
    "    different = a-b\n",
    "    return somme,different\n",
    "calculation(5,4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2081304",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 3 : Mini-projets algorithmiques regroup√©s</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "D√©velopper plusieurs petites fonctions ind√©pendantes, chacune ciblant une comp√©tence pr√©cise\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "- Demander √† l‚Äôutilisateur de saisir un nombre entier n et afficher la factorielle de ce nombre (n!).\n",
    "- Demander √† l‚Äôutilisateur un nombre entier m et afficher sa table de multiplication de 1 √† 10.\n",
    "- Demander √† l‚Äôutilisateur un nombre entier L et indiquer s‚Äôil s‚Äôagit d‚Äôun carr√© parfait.\n",
    "- Demander une cha√Æne de caract√®res √† l‚Äôutilisateur, puis afficher chaque caract√®re un par un.\n",
    "- Demander une phrase √† l‚Äôutilisateur et afficher le mot le plus long de cette phrase.\n",
    "- Demander une cha√Æne de caract√®res Ch et afficher le nombre d‚Äôoccurrences de chaque caract√®re. Exemple : Pour Ch = ‚Äúartificial intelligence developer‚Äù \n",
    "- Le programme doit afficher : Le caract√®re \"i\" figure 5 fois dans la cha√Æne Ch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a06adf5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1*2 = 2\n",
      "2*2 = 4\n",
      "3*2 = 6\n",
      "4*2 = 8\n",
      "5*2 = 10\n",
      "6*2 = 12\n",
      "7*2 = 14\n",
      "8*2 = 16\n",
      "9*2 = 18\n",
      "10*2 = 20\n",
      "m\n",
      "a\n",
      "l\n",
      "i\n",
      "k\n",
      "a\n",
      "Le mot le plus long est : intelligence avec une longueur de 12\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'a': 2,\n",
       " 'r': 2,\n",
       " 't': 2,\n",
       " 'i': 5,\n",
       " 'f': 1,\n",
       " 'c': 2,\n",
       " 'l': 4,\n",
       " ' ': 2,\n",
       " 'n': 2,\n",
       " 'e': 6,\n",
       " 'g': 1,\n",
       " 'd': 1,\n",
       " 'v': 1,\n",
       " 'o': 1,\n",
       " 'p': 1}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math ;\n",
    "    # Factorielle\n",
    "def factorielle(n):\n",
    "    i=1\n",
    "    fact=1\n",
    "    while i <= n:\n",
    "        fact*=i\n",
    "        i+=1\n",
    "    return fact   \n",
    "factorielle(3) \n",
    "\n",
    "    # Multiplication \n",
    "def multip(m):\n",
    "    i=1\n",
    "    while i <= 10:\n",
    "        print(f\"{i}*{m} = {i*m}\") \n",
    "        i+=1\n",
    "    \n",
    "multip(2)\n",
    "\n",
    "    # Carr√© parfait\n",
    "def carre(L):\n",
    "    c=math.sqrt(L)\n",
    "    cInt=int(c)\n",
    "    if c-cInt == 0 :\n",
    "        return \"carre parfait\"\n",
    "    else :\n",
    "        return \"carre non parfait\"\n",
    "carre(5)\n",
    "\n",
    "    # chaine caractere un par un\n",
    "def chaine(ch):\n",
    "    for charctere in ch:\n",
    "        print(charctere)\n",
    "chaine(\"malika\")\n",
    "\n",
    "    # le mot le plus long\n",
    "def long(chaine):\n",
    "    L = chaine.split()\n",
    "    max = L[0]\n",
    "    \n",
    "    for element in L:\n",
    "        if len(element) > len(max):\n",
    "            max = element\n",
    "    \n",
    "    print(\"Le mot le plus long est :\", max, \"avec une longueur de\", len(max))\n",
    "\n",
    "\n",
    "long(\"artificial intelligence developer\")\n",
    "\n",
    "    # Occurence de chaque caractere dans une chaine de caractere\n",
    "def occu(chaine):\n",
    "    occurence={}\n",
    "    for char in chaine :\n",
    "        if char in occurence:\n",
    "            occurence[char]+=1\n",
    "        else :\n",
    "            occurence[char]=1\n",
    "    return occurence\n",
    "occu(\"artificial intelligence developer\")\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "  \n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6b58fb7c",
   "metadata": {},
   "source": [
    "<center>\n",
    "<H1><span style=\"text-align: center; font-weight: bold; color: #746bb3ff;\">Les Bases De Python</span></H1>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2e95ccf",
   "metadata": {},
   "source": [
    "<code>*Dans ces labs, vous d√©couvrirez et ma√Ætriserez les fondamentaux du langage Python, notamment la syntaxe de base, les types de donn√©es, les structures de contr√¥le (conditions, boucles), les fonctions et la gestion des modules. Vous apprendrez √©galement √† manipuler des collections (listes, dictionnaires, ensembles), √† lire et √©crire des fichiers, et √† utiliser les environnements virtuels. Ces comp√©tences vous permettront de d√©velopper vos premiers scripts et d‚Äôacqu√©rir une base solide pour aborder des projets plus avanc√©s en intelligence artificielle et en science des donn√©es.*</code>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8333f40b",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold ; color: #19b7f1ff\">Les ressources: </span></H3> \n",
    "\n",
    "\n",
    "- **Conditions** : \n",
    "* [Python if/else Statements (Real Python)](https://realpython.com/python-conditional-statements/)  \n",
    "*  [Documentation officielle ‚Äì if](https://docs.python.org/fr/3/tutorial/controlflow.html#if-statements-and-expressions)\n",
    "\n",
    "- **Boucles** : \n",
    "* [Python Loops (Real Python)](https://realpython.com/python-for-loop/)  \n",
    "*  [Documentation officielle ‚Äì for](https://docs.python.org/fr/3/tutorial/controlflow.html#for-statements)\n",
    "\n",
    "- **Try/Except** : \n",
    "* [Python Exceptions (Real Python)](https://realpython.com/python-exceptions/)  \n",
    "*  [Documentation officielle ‚Äì exceptions](https://docs.python.org/fr/3/tutorial/errors.html#handling-exceptions)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab1d155d",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 1 : Pr√©sentation personnalis√©e</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Apprendre √† utiliser la fonction input() pour interagir avec l‚Äôutilisateur et afficher une sortie personnalis√©e avec print().\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "√âcris un programme qui demande √† l‚Äôutilisateur son pr√©nom et son √¢ge, puis affiche un message personnalis√© indiquant son pr√©nom et son √¢ge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "751431f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "nom = input(\"Entrez votre nom : \")\n",
    "age = int(input(\"Entrez votre age\"))\n",
    "\n",
    "print(\"Votre nom est : \" , nom , \"Et votre age est : \" , age)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e313a8c6",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge  2 : Calcul de salaire avec heures suppl√©mentaires</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Travailler la saisie de donn√©es utilisateur, les conversions de types, les conditions (if), et les op√©rations arithm√©tiques pour simuler un cas r√©el de calcul de paie. \n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "* √âcris un programme qui r√©cup√®re les informations suivantes depuis l‚Äôentr√©e utilisateur : son nom, son salaire horaire et le nombre d‚Äôheures qu‚Äôil a travaill√©es.\n",
    "* Si le nombre d‚Äôheures travaill√©es d√©passe 40 heures, les heures au-del√† de 40 seront consid√©r√©es comme des heures suppl√©mentaires et r√©mun√©r√©es √† 1,5 fois le salaire horaire normal.\n",
    "* Le programme doit alors calculer le salaire total (salaire r√©gulier + √©ventuelles heures suppl√©mentaires).\n",
    "Enfin, affiche le nom de l‚Äôutilisateur ainsi que son salaire total calcul√©."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93ec144e",
   "metadata": {},
   "outputs": [],
   "source": [
    "nom = input(\"Entrez votre nom : \")\n",
    "shr= float(input(\"Entrez votre salaire horaire : \" ))\n",
    "nbrHr = int(input(\"Entrez les heures de travail : \"))\n",
    "\n",
    "if nbrHr > 40 :\n",
    "    hrA = nbrHr - 40\n",
    "    remun = hrA * shr * 1.5\n",
    "    salaireReg = (shr * 40) + remun\n",
    "    print(\"Votre salaire est : \" ,salaireReg)\n",
    "else :\n",
    "    salaireReg = shr * nbrHr\n",
    "    print(\"Votre salaire est : \" ,salaireReg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e2e052e",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 3 :  Gestion des erreurs utilisateur</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Introduire les blocs try / except afin de rendre le programme plus robuste face aux erreurs de saisie (par exemple, texte au lieu de nombres).\n",
    "\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "R√©√©cris ton programme de calcul de salaire en utilisant try et except afin que le programme g√®re proprement les entr√©es non num√©riques en affichant un message d‚Äôerreur puis en quittant le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a83ebcec",
   "metadata": {},
   "outputs": [],
   "source": [
    "nom = input(\"Entrez votre nom : \")\n",
    "try :\n",
    "    shr= float(input(\"Entrez votre salaire horaire : \" ))\n",
    "    nbrHr = int(input(\"Entrez les heures de travail : \"))\n",
    "    if nbrHr > 40 :\n",
    "        hrA = nbrHr - 40\n",
    "        remun = hrA * shr * 1.5\n",
    "        salaireReg = (shr * 40) + remun\n",
    "        print(\"Votre salaire est : \" ,salaireReg)\n",
    "    else :\n",
    "        salaireReg = shr * nbrHr\n",
    "        print(\"Votre salaire est : \" ,salaireReg)\n",
    "except :\n",
    "    print(\"Oops!  That was no valid number.  Try again...\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b34c3c1",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 4 : D√©terminer le signe d‚Äôun produit de deux nombres</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    " Amener l‚Äôapprenant √† manipuler les entr√©es utilisateur, les conditions (if/elif/else) et la logique math√©matique pour d√©terminer le signe du produit de deux nombres.\n",
    "\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "√âcrire un programme en Python qui demande √† l'utilisateur deux nombres n1 et n2 et lui indique ensuite si le produit de ces deux nombres est positif ou n√©gatif. On pr√©voit dans le programme le cas o√π le produit peut √™tre nul."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "91115272",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Le produit de ces deux nombres est n√©gatif\n"
     ]
    }
   ],
   "source": [
    "n1 = int(input(\"Entrez le premier nombre : \"))\n",
    "n2 = int(input(\"Entrez le deuxieme nombre\"))\n",
    "produit = n1*n2\n",
    "if produit < 0 :\n",
    "    print(\"Le produit de ces deux nombres est n√©gatif\")\n",
    "else :\n",
    "    print(\"Le produit de ces deux nombres est positif\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e765cc2b",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 5 : Somme d‚Äôentiers</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Apprendre √† utiliser la boucle while pour r√©p√©ter une op√©ration jusqu‚Äô√† une condition donn√©e.\n",
    "\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "Ecrivez un programme en Python qui calcule la somme de 1 √† N, o√π N est saisi par l'utilisateur. En utilisant la boucle \"while\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0de1f6c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La somme de 0 √† 5 est 15\n"
     ]
    }
   ],
   "source": [
    "n = int(input(\"Entrer un nombre\"))\n",
    "i = 1\n",
    "sum=0\n",
    "while i<=n :\n",
    "    sum+=i\n",
    "    i+=1\n",
    "print(f\"La somme de 0 √† {n} est {sum}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7082952c",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 6 : Inverser une cha√Æne</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Comprendre la manipulation de cha√Ænes de caract√®res et l‚Äôusage de la boucle while pour parcourir une cha√Æne en sens inverse.\n",
    "\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    " * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\n",
    " * √âcrire un programme en Python qui inverse une cha√Æne de caract√®res en utilisant une boucle while.\n",
    " * Exemple: Cha√Æne originale: DevAI ==>\n",
    "   Cha√Æne invers√©e: IAveD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "814c2390",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "akilam\n"
     ]
    }
   ],
   "source": [
    "chaine = input(\"Entrez une chaine de caractere\")\n",
    "chaineinverse=\"\"\n",
    "i=len(chaine)-1\n",
    "while i>=0 :\n",
    "    chaineinverse+=chaine[i]\n",
    "    i=i-1\n",
    "print(chaineinverse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c27da2e",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 7 : Calcul de distance entre deux points</span></H3>\n",
    "\n",
    "1. <span style=\"font-weight: bold; color: #e56922ff;\">Objectif</span> : </br>\n",
    "Apprendre √† manipuler les nombres flottants et √† appliquer une formule math√©matique en Python. Cet exercice permet d‚Äôutiliser l‚Äôentr√©e utilisateur <code>(input())</code>, la conversion de types <code>(float())</code>, et la fonction <code>math.sqrt()</code> pour calculer la distance euclidienne entre deux points \n",
    "<code>(x1,y1)(x1‚Äã,y1‚Äã)</code> et <code>(x2,y2)(x2‚Äã,y2‚Äã)</code>.\n",
    "\n",
    "2. <span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "√âcrire un programme Python pour calculer la distance entre deux points. \n",
    "\n",
    "$$\n",
    "\\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d34f939",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.4142135623730951\n"
     ]
    }
   ],
   "source": [
    "import math \n",
    "x1 = float(input(\"Entrez x1\"))\n",
    "x2 = float(input(\"Entrez x2\"))\n",
    "y1 = float(input(\"Entrez y1\"))\n",
    "y2 = float(input(\"Entrez y2\"))\n",
    "\n",
    "distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n",
    "print(distance)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6685b3ac",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b44d4791",
   "metadata": {},
   "source": [
    "<center>\n",
    "<H1><span style=\"text-align: center; font-weight: bold; color: #746bb3ff;\">Les Listes</span></H1>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9c93591",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold ; color: #19b7f1ff\">Les ressources: </span></H3> \n",
    "\n",
    "* [Python Lists and List Manipulation](https://realpython.com/python-lists-tuples/)\n",
    "* [Documentation Officielle de Python - Structures de donn√©es - Listes](https://docs.python.org/fr/3/tutorial/datastructures.html#more-on-lists)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "873352ef",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 1 : La liste des notes </span></H3>\n",
    "\n",
    "<center><code>notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]</code></center>\n",
    "\n",
    "<span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "√âcris un programme en Python qui extrait toutes les notes sup√©rieures √† la moyenne et les stocke dans une nouvelle liste."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "08a09dc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14, 18, 13, 15, 14, 16]\n"
     ]
    }
   ],
   "source": [
    "notes = [12, 4, 14, 11, 18, 13, 7, 10, 5, 9, 15, 8, 14, 16]\n",
    "notesSup = []\n",
    "somme=0\n",
    "nbr = len(notes)-1\n",
    "for i in notes:\n",
    "    somme+=i\n",
    "moyenne=somme/nbr\n",
    "for element in notes:\n",
    "    if element > moyenne:\n",
    "        notesSup.append(element)\n",
    "print(notesSup)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87452d02",
   "metadata": {},
   "source": [
    "\n",
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 2 : Les mots communs</span></H3>\n",
    "\n",
    "<center><code>\n",
    "Ch1 = \"Le langage Python est tr√®s populaire\" <br>\n",
    "Ch2 = \"Python est un langage puissant\"\n",
    "        </code></center>\n",
    "\n",
    "<span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "√âcris un programme en Python qui permet de regrouper dans une liste les mots communs entre deux cha√Ænes de caract√®res Ch1 et Ch2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a640e80e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['langage', 'Python', 'est']\n"
     ]
    }
   ],
   "source": [
    "Ch1 = \"Le langage Python est tr√®s populaire\" \n",
    "Ch2 = \"Python est un langage puissant\"\n",
    "ch3=[]\n",
    "list1= Ch1.split()\n",
    "list2= Ch2.split()\n",
    "for element in list1 :\n",
    "    if element in Ch2 and element not in ch3 :\n",
    "        ch3.append(element)\n",
    "print(str(ch3))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d74627c",
   "metadata": {},
   "source": [
    "\n",
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 3 : Manipulation et tri de listes mixtes</span></H3>\n",
    "\n",
    "<center><code>\n",
    "stock = [\"Stylo\", 25, \"Classeur\", 100, \"Crayon\", 12, \"Surligneur\", 40, \"Feutre\", 5]\n",
    "        </code></center>\n",
    "\n",
    "<span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    " √âcris un programme Python qui effectue les op√©rations suivantes √† partir de la liste stock :\n",
    "\n",
    " 1. Afficher la liste initiale.\n",
    "2. Cr√©er deux nouvelles listes :\n",
    "\n",
    "* une contenant uniquement les cha√Ænes de caract√®res,\n",
    "\n",
    "* l‚Äôautre contenant uniquement les valeurs num√©riques.\n",
    "\n",
    "3. Trier :\n",
    "\n",
    "* la liste des cha√Ænes en ordre croissant (alphab√©tique),\n",
    "\n",
    "* la liste des nombres en ordre d√©croissant.\n",
    "\n",
    "4. Afficher les deux listes tri√©es."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "67b9949c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ami', 'Classeur', 'Crayon', 'Feutre', 'Stylo', 'Surligneur']\n",
      "[100, 40, 25, 12, 5]\n"
     ]
    }
   ],
   "source": [
    "stock = [\"Stylo\", 25, \"Classeur\", 100, \"Crayon\", 12, \"Surligneur\", 40, \"Feutre\", 5,\"Ami\"]\n",
    "chaine=[x for x in stock if isinstance(x,str)]\n",
    "num=[x for x in stock if isinstance(x,int)]\n",
    "nbr=len(num)\n",
    "nbrStr=len(chaine)\n",
    "for i in range(nbr):\n",
    "    for j in range(i+1, nbr):\n",
    "        if num[j]>num[i]:\n",
    "            temp=num[j]\n",
    "            num[j]=num[i]\n",
    "            num[i]=temp\n",
    "\n",
    "for i in range(nbrStr):\n",
    "    for j in range(i+1,nbrStr):\n",
    "        if chaine[j]<chaine[i]:\n",
    "            temp=chaine[j]\n",
    "            chaine[j]=chaine[i]\n",
    "            chaine[i]=temp\n",
    "print(chaine)\n",
    "print(num)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe0eccef",
   "metadata": {},
   "source": [
    "\n",
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 4 : Recherche d‚Äôun √©l√©ment dans une liste </span></H3>\n",
    "\n",
    "<center><code>Fruits = [\"pomme\", \"banane\", \"orange\", \"kiwi\", \"mangue\"]</code></center>\n",
    "\n",
    "<span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "Cr√©er une fonction ¬´ rechercheElement ¬ª qui a pour param√®tres un √©l√©ment et une liste et qui renvoie False si l‚Äô√©l√©ment n‚Äôest pas dans la liste, ou l‚Äôindice de l‚Äô√©l√©ment dans le cas contraire."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b6d66015",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Fruits = [\"pomme\", \"banane\", \"orange\", \"kiwi\", \"mangue\"]\n",
    "\n",
    "def rechercheElement(mots):\n",
    "    for element in Fruits :\n",
    "        if element == mots :\n",
    "            return element\n",
    "        else :\n",
    "            return False\n",
    "rechercheElement(\"pp\")        \n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce9ba959",
   "metadata": {},
   "source": [
    "<H3><span style=\"font-weight: bold; color: #1a8bcdff;\">Challenge 5 : Nombre d'occurrences </span></H3>\n",
    "\n",
    "<center><code>L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]</code></center>\n",
    "\n",
    "<span style=\"font-weight: bold; color: #e56922ff;\">Travail √† faire</span>:</br>\n",
    "√âcrire un algorithme en python qui renvoie le nombre d'occurrences d'un √©l√©ment a dans une liste L donn√©e sans utiliser aucune fonction pr√©d√©finie en Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fb150eca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L = [7 , 23 , 5 , 23 , 7 , 19 , 23 , 12 , 29]\n",
    "def occu(a):\n",
    "    b=0\n",
    "    for i in L :\n",
    "        if i == a :\n",
    "            b+=1\n",
    "    return b\n",
    "occu(23)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8fb0d93",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
üß© Challenges en Python

1. Bases du langage Python
2. Fonctions et port√©e des variables
3. Listes, dictionnaires et tuples
4. Programmation orient√©e objet (classes)
5. Manipulation de fichiers
